/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.analysis;

import java.util.*;
import graceLang.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAFuncDef(AFuncDef node)
    {
        defaultCase(node);
    }

    public void caseAHeader(AHeader node)
    {
        defaultCase(node);
    }

    public void caseAParamDef(AParamDef node)
    {
        defaultCase(node);
    }

    public void caseAMoreParamDef(AMoreParamDef node)
    {
        defaultCase(node);
    }

    public void caseAMultipleParams(AMultipleParams node)
    {
        defaultCase(node);
    }

    public void caseAParType(AParType node)
    {
        defaultCase(node);
    }

    public void caseAFuncLocalDef(AFuncLocalDef node)
    {
        defaultCase(node);
    }

    public void caseAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultCase(node);
    }

    public void caseAVarDeclLocalDef(AVarDeclLocalDef node)
    {
        defaultCase(node);
    }

    public void caseABlock(ABlock node)
    {
        defaultCase(node);
    }

    public void caseAFuncDecl(AFuncDecl node)
    {
        defaultCase(node);
    }

    public void caseAVarDecl(AVarDecl node)
    {
        defaultCase(node);
    }

    public void caseAArrayInit(AArrayInit node)
    {
        defaultCase(node);
    }

    public void caseAMoreIds(AMoreIds node)
    {
        defaultCase(node);
    }

    public void caseADataIntDataType(ADataIntDataType node)
    {
        defaultCase(node);
    }

    public void caseADataCharDataType(ADataCharDataType node)
    {
        defaultCase(node);
    }

    public void caseAType(AType node)
    {
        defaultCase(node);
    }

    public void caseARetNothingRetType(ARetNothingRetType node)
    {
        defaultCase(node);
    }

    public void caseARetDataTypeRetType(ARetDataTypeRetType node)
    {
        defaultCase(node);
    }

    public void caseASepStatement(ASepStatement node)
    {
        defaultCase(node);
    }

    public void caseALValAssStatement(ALValAssStatement node)
    {
        defaultCase(node);
    }

    public void caseABlockStatement(ABlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseARetStStatement(ARetStStatement node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileSt(AWhileSt node)
    {
        defaultCase(node);
    }

    public void caseAWhileWElse(AWhileWElse node)
    {
        defaultCase(node);
    }

    public void caseAIfSt(AIfSt node)
    {
        defaultCase(node);
    }

    public void caseAIfHeader(AIfHeader node)
    {
        defaultCase(node);
    }

    public void caseANoElseIfTail(ANoElseIfTail node)
    {
        defaultCase(node);
    }

    public void caseAElseIfTail(AElseIfTail node)
    {
        defaultCase(node);
    }

    public void caseASepStWElse(ASepStWElse node)
    {
        defaultCase(node);
    }

    public void caseALValAssStWElse(ALValAssStWElse node)
    {
        defaultCase(node);
    }

    public void caseABlockStWElse(ABlockStWElse node)
    {
        defaultCase(node);
    }

    public void caseARetStStWElse(ARetStStWElse node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallStWElse(AFuncCallStWElse node)
    {
        defaultCase(node);
    }

    public void caseAIfStWElse(AIfStWElse node)
    {
        defaultCase(node);
    }

    public void caseAWhileStWElse(AWhileStWElse node)
    {
        defaultCase(node);
    }

    public void caseAIfElse(AIfElse node)
    {
        defaultCase(node);
    }

    public void caseARetSt(ARetSt node)
    {
        defaultCase(node);
    }

    public void caseAFuncCall(AFuncCall node)
    {
        defaultCase(node);
    }

    public void caseAFuncParams(AFuncParams node)
    {
        defaultCase(node);
    }

    public void caseAMultFuncParams(AMultFuncParams node)
    {
        defaultCase(node);
    }

    public void caseALValWOffs(ALValWOffs node)
    {
        defaultCase(node);
    }

    public void caseALValIdLVal(ALValIdLVal node)
    {
        defaultCase(node);
    }

    public void caseALValStrLVal(ALValStrLVal node)
    {
        defaultCase(node);
    }

    public void caseALValOffsLVal(ALValOffsLVal node)
    {
        defaultCase(node);
    }

    public void caseAOffs(AOffs node)
    {
        defaultCase(node);
    }

    public void caseALValSimpleLValAssign(ALValSimpleLValAssign node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallExpression(AFuncCallExpression node)
    {
        defaultCase(node);
    }

    public void caseANumericExpression(ANumericExpression node)
    {
        defaultCase(node);
    }

    public void caseAPlusNumericExpr(APlusNumericExpr node)
    {
        defaultCase(node);
    }

    public void caseAMinusNumericExpr(AMinusNumericExpr node)
    {
        defaultCase(node);
    }

    public void caseATermNumericExpr(ATermNumericExpr node)
    {
        defaultCase(node);
    }

    public void caseATimesTerm(ATimesTerm node)
    {
        defaultCase(node);
    }

    public void caseADivTerm(ADivTerm node)
    {
        defaultCase(node);
    }

    public void caseAModTerm(AModTerm node)
    {
        defaultCase(node);
    }

    public void caseAFactorTerm(AFactorTerm node)
    {
        defaultCase(node);
    }

    public void caseAParExprFactor(AParExprFactor node)
    {
        defaultCase(node);
    }

    public void caseALValueFactor(ALValueFactor node)
    {
        defaultCase(node);
    }

    public void caseACharConstFactor(ACharConstFactor node)
    {
        defaultCase(node);
    }

    public void caseANumberFactor(ANumberFactor node)
    {
        defaultCase(node);
    }

    public void caseACondCondition(ACondCondition node)
    {
        defaultCase(node);
    }

    public void caseAAndCondCondition(AAndCondCondition node)
    {
        defaultCase(node);
    }

    public void caseAAndCondAndCond(AAndCondAndCond node)
    {
        defaultCase(node);
    }

    public void caseANotCondAndCond(ANotCondAndCond node)
    {
        defaultCase(node);
    }

    public void caseANotCondNotCond(ANotCondNotCond node)
    {
        defaultCase(node);
    }

    public void caseAOperatorCondNotCond(AOperatorCondNotCond node)
    {
        defaultCase(node);
    }

    public void caseAOperatorCondOperatorCond(AOperatorCondOperatorCond node)
    {
        defaultCase(node);
    }

    public void caseAParCondOperatorCond(AParCondOperatorCond node)
    {
        defaultCase(node);
    }

    public void caseAParCondParCond(AParCondParCond node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTNlE(TNlE node)
    {
        defaultCase(node);
    }

    public void caseTTabE(TTabE node)
    {
        defaultCase(node);
    }

    public void caseTCrE(TCrE node)
    {
        defaultCase(node);
    }

    public void caseTNullTermE(TNullTermE node)
    {
        defaultCase(node);
    }

    public void caseTBackslashE(TBackslashE node)
    {
        defaultCase(node);
    }

    public void caseTApostropheE(TApostropheE node)
    {
        defaultCase(node);
    }

    public void caseTQuotesE(TQuotesE node)
    {
        defaultCase(node);
    }

    public void caseTHexaE(THexaE node)
    {
        defaultCase(node);
    }

    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTFun(TFun node)
    {
        defaultCase(node);
    }

    public void caseTNothing(TNothing node)
    {
        defaultCase(node);
    }

    public void caseTRef(TRef node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTOpenPar(TOpenPar node)
    {
        defaultCase(node);
    }

    public void caseTClosePar(TClosePar node)
    {
        defaultCase(node);
    }

    public void caseTOpenCbrack(TOpenCbrack node)
    {
        defaultCase(node);
    }

    public void caseTCloseCbrack(TCloseCbrack node)
    {
        defaultCase(node);
    }

    public void caseTOpenBrack(TOpenBrack node)
    {
        defaultCase(node);
    }

    public void caseTCloseBrack(TCloseBrack node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTOcBrack(TOcBrack node)
    {
        defaultCase(node);
    }

    public void caseTSeparator(TSeparator node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTMultComment(TMultComment node)
    {
        defaultCase(node);
    }

    public void caseTOperation(TOperation node)
    {
        defaultCase(node);
    }

    public void caseTCompOperator(TCompOperator node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTCharConst(TCharConst node)
    {
        defaultCase(node);
    }

    public void caseTStringConst(TStringConst node)
    {
        defaultCase(node);
    }

    public void caseTNumOrId(TNumOrId node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
