/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.analysis;

import java.util.*;
import graceLang.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAFuncDef(AFuncDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDef(AFuncDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDef(AFuncDef node)
    {
        inAFuncDef(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            Collections.reverse(copy);
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFuncDef(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getRetType() != null)
        {
            node.getRetType().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        if(node.getClosePar() != null)
        {
            node.getClosePar().apply(this);
        }
        {
            List<PParamDef> copy = new ArrayList<PParamDef>(node.getParamDef());
            Collections.reverse(copy);
            for(PParamDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOpenPar() != null)
        {
            node.getOpenPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        outAHeader(node);
    }

    public void inAParamDef(AParamDef node)
    {
        defaultIn(node);
    }

    public void outAParamDef(AParamDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamDef(AParamDef node)
    {
        inAParamDef(node);
        if(node.getMoreParamDef() != null)
        {
            node.getMoreParamDef().apply(this);
        }
        if(node.getParType() != null)
        {
            node.getParType().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        {
            List<PMultipleParams> copy = new ArrayList<PMultipleParams>(node.getMultipleParams());
            Collections.reverse(copy);
            for(PMultipleParams e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        outAParamDef(node);
    }

    public void inAMoreParamDef(AMoreParamDef node)
    {
        defaultIn(node);
    }

    public void outAMoreParamDef(AMoreParamDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreParamDef(AMoreParamDef node)
    {
        inAMoreParamDef(node);
        if(node.getParamDef() != null)
        {
            node.getParamDef().apply(this);
        }
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outAMoreParamDef(node);
    }

    public void inAMultipleParams(AMultipleParams node)
    {
        defaultIn(node);
    }

    public void outAMultipleParams(AMultipleParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleParams(AMultipleParams node)
    {
        inAMultipleParams(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMultipleParams(node);
    }

    public void inAParType(AParType node)
    {
        defaultIn(node);
    }

    public void outAParType(AParType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParType(AParType node)
    {
        inAParType(node);
        if(node.getOcBrack() != null)
        {
            node.getOcBrack().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outAParType(node);
    }

    public void inAFuncLocalDef(AFuncLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncLocalDef(AFuncLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncLocalDef(AFuncLocalDef node)
    {
        inAFuncLocalDef(node);
        if(node.getFuncDef() != null)
        {
            node.getFuncDef().apply(this);
        }
        outAFuncLocalDef(node);
    }

    public void inAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        inAFuncDeclLocalDef(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAFuncDeclLocalDef(node);
    }

    public void inAVarDeclLocalDef(AVarDeclLocalDef node)
    {
        defaultIn(node);
    }

    public void outAVarDeclLocalDef(AVarDeclLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDeclLocalDef(AVarDeclLocalDef node)
    {
        inAVarDeclLocalDef(node);
        if(node.getVarDecl() != null)
        {
            node.getVarDecl().apply(this);
        }
        outAVarDeclLocalDef(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getCloseCbrack() != null)
        {
            node.getCloseCbrack().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOpenCbrack() != null)
        {
            node.getOpenCbrack().apply(this);
        }
        outABlock(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getArrayInit() != null)
        {
            node.getArrayInit().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        {
            List<PMoreIds> copy = new ArrayList<PMoreIds>(node.getMoreIds());
            Collections.reverse(copy);
            for(PMoreIds e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarDecl(node);
    }

    public void inAArrayInit(AArrayInit node)
    {
        defaultIn(node);
    }

    public void outAArrayInit(AArrayInit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInit(AArrayInit node)
    {
        inAArrayInit(node);
        if(node.getCloseBrack() != null)
        {
            node.getCloseBrack().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getOpenBrack() != null)
        {
            node.getOpenBrack().apply(this);
        }
        outAArrayInit(node);
    }

    public void inAMoreIds(AMoreIds node)
    {
        defaultIn(node);
    }

    public void outAMoreIds(AMoreIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMoreIds(AMoreIds node)
    {
        inAMoreIds(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMoreIds(node);
    }

    public void inADataIntDataType(ADataIntDataType node)
    {
        defaultIn(node);
    }

    public void outADataIntDataType(ADataIntDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataIntDataType(ADataIntDataType node)
    {
        inADataIntDataType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outADataIntDataType(node);
    }

    public void inADataCharDataType(ADataCharDataType node)
    {
        defaultIn(node);
    }

    public void outADataCharDataType(ADataCharDataType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataCharDataType(ADataCharDataType node)
    {
        inADataCharDataType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outADataCharDataType(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getOcBrack() != null)
        {
            node.getOcBrack().apply(this);
        }
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outAType(node);
    }

    public void inARetNothingRetType(ARetNothingRetType node)
    {
        defaultIn(node);
    }

    public void outARetNothingRetType(ARetNothingRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetNothingRetType(ARetNothingRetType node)
    {
        inARetNothingRetType(node);
        if(node.getNothing() != null)
        {
            node.getNothing().apply(this);
        }
        outARetNothingRetType(node);
    }

    public void inARetDataTypeRetType(ARetDataTypeRetType node)
    {
        defaultIn(node);
    }

    public void outARetDataTypeRetType(ARetDataTypeRetType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetDataTypeRetType(ARetDataTypeRetType node)
    {
        inARetDataTypeRetType(node);
        if(node.getDataType() != null)
        {
            node.getDataType().apply(this);
        }
        outARetDataTypeRetType(node);
    }

    public void inASepStatement(ASepStatement node)
    {
        defaultIn(node);
    }

    public void outASepStatement(ASepStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASepStatement(ASepStatement node)
    {
        inASepStatement(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outASepStatement(node);
    }

    public void inALValAssStatement(ALValAssStatement node)
    {
        defaultIn(node);
    }

    public void outALValAssStatement(ALValAssStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValAssStatement(ALValAssStatement node)
    {
        inALValAssStatement(node);
        if(node.getLValAssign() != null)
        {
            node.getLValAssign().apply(this);
        }
        outALValAssStatement(node);
    }

    public void inABlockStatement(ABlockStatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatement(ABlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        inABlockStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfSt() != null)
        {
            node.getIfSt().apply(this);
        }
        outAIfStatement(node);
    }

    public void inARetStStatement(ARetStStatement node)
    {
        defaultIn(node);
    }

    public void outARetStStatement(ARetStStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetStStatement(ARetStStatement node)
    {
        inARetStStatement(node);
        if(node.getRetSt() != null)
        {
            node.getRetSt().apply(this);
        }
        outARetStStatement(node);
    }

    public void inAFuncCallStatement(AFuncCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStatement(AFuncCallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        inAFuncCallStatement(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getWhileSt() != null)
        {
            node.getWhileSt().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAWhileSt(AWhileSt node)
    {
        defaultIn(node);
    }

    public void outAWhileSt(AWhileSt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileSt(AWhileSt node)
    {
        inAWhileSt(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileSt(node);
    }

    public void inAWhileWElse(AWhileWElse node)
    {
        defaultIn(node);
    }

    public void outAWhileWElse(AWhileWElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileWElse(AWhileWElse node)
    {
        inAWhileWElse(node);
        if(node.getStWElse() != null)
        {
            node.getStWElse().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileWElse(node);
    }

    public void inAIfSt(AIfSt node)
    {
        defaultIn(node);
    }

    public void outAIfSt(AIfSt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfSt(AIfSt node)
    {
        inAIfSt(node);
        if(node.getIfTail() != null)
        {
            node.getIfTail().apply(this);
        }
        if(node.getIfHeader() != null)
        {
            node.getIfHeader().apply(this);
        }
        outAIfSt(node);
    }

    public void inAIfHeader(AIfHeader node)
    {
        defaultIn(node);
    }

    public void outAIfHeader(AIfHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfHeader(AIfHeader node)
    {
        inAIfHeader(node);
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfHeader(node);
    }

    public void inANoElseIfTail(ANoElseIfTail node)
    {
        defaultIn(node);
    }

    public void outANoElseIfTail(ANoElseIfTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseIfTail(ANoElseIfTail node)
    {
        inANoElseIfTail(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outANoElseIfTail(node);
    }

    public void inAElseIfTail(AElseIfTail node)
    {
        defaultIn(node);
    }

    public void outAElseIfTail(AElseIfTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseIfTail(AElseIfTail node)
    {
        inAElseIfTail(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStWElse() != null)
        {
            node.getStWElse().apply(this);
        }
        outAElseIfTail(node);
    }

    public void inASepStWElse(ASepStWElse node)
    {
        defaultIn(node);
    }

    public void outASepStWElse(ASepStWElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASepStWElse(ASepStWElse node)
    {
        inASepStWElse(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        outASepStWElse(node);
    }

    public void inALValAssStWElse(ALValAssStWElse node)
    {
        defaultIn(node);
    }

    public void outALValAssStWElse(ALValAssStWElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValAssStWElse(ALValAssStWElse node)
    {
        inALValAssStWElse(node);
        if(node.getLValAssign() != null)
        {
            node.getLValAssign().apply(this);
        }
        outALValAssStWElse(node);
    }

    public void inABlockStWElse(ABlockStWElse node)
    {
        defaultIn(node);
    }

    public void outABlockStWElse(ABlockStWElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStWElse(ABlockStWElse node)
    {
        inABlockStWElse(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStWElse(node);
    }

    public void inARetStStWElse(ARetStStWElse node)
    {
        defaultIn(node);
    }

    public void outARetStStWElse(ARetStStWElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetStStWElse(ARetStStWElse node)
    {
        inARetStStWElse(node);
        if(node.getRetSt() != null)
        {
            node.getRetSt().apply(this);
        }
        outARetStStWElse(node);
    }

    public void inAFuncCallStWElse(AFuncCallStWElse node)
    {
        defaultIn(node);
    }

    public void outAFuncCallStWElse(AFuncCallStWElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallStWElse(AFuncCallStWElse node)
    {
        inAFuncCallStWElse(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallStWElse(node);
    }

    public void inAIfStWElse(AIfStWElse node)
    {
        defaultIn(node);
    }

    public void outAIfStWElse(AIfStWElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStWElse(AIfStWElse node)
    {
        inAIfStWElse(node);
        if(node.getIfElse() != null)
        {
            node.getIfElse().apply(this);
        }
        outAIfStWElse(node);
    }

    public void inAWhileStWElse(AWhileStWElse node)
    {
        defaultIn(node);
    }

    public void outAWhileStWElse(AWhileStWElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStWElse(AWhileStWElse node)
    {
        inAWhileStWElse(node);
        if(node.getWhileWElse() != null)
        {
            node.getWhileWElse().apply(this);
        }
        outAWhileStWElse(node);
    }

    public void inAIfElse(AIfElse node)
    {
        defaultIn(node);
    }

    public void outAIfElse(AIfElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElse(AIfElse node)
    {
        inAIfElse(node);
        if(node.getOuter() != null)
        {
            node.getOuter().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getInner() != null)
        {
            node.getInner().apply(this);
        }
        if(node.getIfHeader() != null)
        {
            node.getIfHeader().apply(this);
        }
        outAIfElse(node);
    }

    public void inARetSt(ARetSt node)
    {
        defaultIn(node);
    }

    public void outARetSt(ARetSt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetSt(ARetSt node)
    {
        inARetSt(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outARetSt(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getClosePar() != null)
        {
            node.getClosePar().apply(this);
        }
        if(node.getFuncParams() != null)
        {
            node.getFuncParams().apply(this);
        }
        if(node.getOpenPar() != null)
        {
            node.getOpenPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFuncCall(node);
    }

    public void inAFuncParams(AFuncParams node)
    {
        defaultIn(node);
    }

    public void outAFuncParams(AFuncParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncParams(AFuncParams node)
    {
        inAFuncParams(node);
        {
            List<PMultFuncParams> copy = new ArrayList<PMultFuncParams>(node.getMultFuncParams());
            Collections.reverse(copy);
            for(PMultFuncParams e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAFuncParams(node);
    }

    public void inAMultFuncParams(AMultFuncParams node)
    {
        defaultIn(node);
    }

    public void outAMultFuncParams(AMultFuncParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFuncParams(AMultFuncParams node)
    {
        inAMultFuncParams(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAMultFuncParams(node);
    }

    public void inALValWOffs(ALValWOffs node)
    {
        defaultIn(node);
    }

    public void outALValWOffs(ALValWOffs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValWOffs(ALValWOffs node)
    {
        inALValWOffs(node);
        if(node.getOffs() != null)
        {
            node.getOffs().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALValWOffs(node);
    }

    public void inALValIdLVal(ALValIdLVal node)
    {
        defaultIn(node);
    }

    public void outALValIdLVal(ALValIdLVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValIdLVal(ALValIdLVal node)
    {
        inALValIdLVal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outALValIdLVal(node);
    }

    public void inALValStrLVal(ALValStrLVal node)
    {
        defaultIn(node);
    }

    public void outALValStrLVal(ALValStrLVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValStrLVal(ALValStrLVal node)
    {
        inALValStrLVal(node);
        if(node.getStringConst() != null)
        {
            node.getStringConst().apply(this);
        }
        outALValStrLVal(node);
    }

    public void inALValOffsLVal(ALValOffsLVal node)
    {
        defaultIn(node);
    }

    public void outALValOffsLVal(ALValOffsLVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValOffsLVal(ALValOffsLVal node)
    {
        inALValOffsLVal(node);
        if(node.getCloseBrack() != null)
        {
            node.getCloseBrack().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOpenBrack() != null)
        {
            node.getOpenBrack().apply(this);
        }
        if(node.getLVal() != null)
        {
            node.getLVal().apply(this);
        }
        outALValOffsLVal(node);
    }

    public void inAOffs(AOffs node)
    {
        defaultIn(node);
    }

    public void outAOffs(AOffs node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOffs(AOffs node)
    {
        inAOffs(node);
        if(node.getCloseBrack() != null)
        {
            node.getCloseBrack().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOpenBrack() != null)
        {
            node.getOpenBrack().apply(this);
        }
        outAOffs(node);
    }

    public void inALValSimpleLValAssign(ALValSimpleLValAssign node)
    {
        defaultIn(node);
    }

    public void outALValSimpleLValAssign(ALValSimpleLValAssign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValSimpleLValAssign(ALValSimpleLValAssign node)
    {
        inALValSimpleLValAssign(node);
        if(node.getSeparator() != null)
        {
            node.getSeparator().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getLVal() != null)
        {
            node.getLVal().apply(this);
        }
        outALValSimpleLValAssign(node);
    }

    public void inAFuncCallExpression(AFuncCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFuncCallExpression(AFuncCallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallExpression(AFuncCallExpression node)
    {
        inAFuncCallExpression(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallExpression(node);
    }

    public void inANumericExpression(ANumericExpression node)
    {
        defaultIn(node);
    }

    public void outANumericExpression(ANumericExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericExpression(ANumericExpression node)
    {
        inANumericExpression(node);
        if(node.getNumericExpr() != null)
        {
            node.getNumericExpr().apply(this);
        }
        outANumericExpression(node);
    }

    public void inAPlusNumericExpr(APlusNumericExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusNumericExpr(APlusNumericExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusNumericExpr(APlusNumericExpr node)
    {
        inAPlusNumericExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getNumericExpr() != null)
        {
            node.getNumericExpr().apply(this);
        }
        outAPlusNumericExpr(node);
    }

    public void inAMinusNumericExpr(AMinusNumericExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusNumericExpr(AMinusNumericExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusNumericExpr(AMinusNumericExpr node)
    {
        inAMinusNumericExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getNumericExpr() != null)
        {
            node.getNumericExpr().apply(this);
        }
        outAMinusNumericExpr(node);
    }

    public void inATermNumericExpr(ATermNumericExpr node)
    {
        defaultIn(node);
    }

    public void outATermNumericExpr(ATermNumericExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermNumericExpr(ATermNumericExpr node)
    {
        inATermNumericExpr(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermNumericExpr(node);
    }

    public void inATimesTerm(ATimesTerm node)
    {
        defaultIn(node);
    }

    public void outATimesTerm(ATimesTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesTerm(ATimesTerm node)
    {
        inATimesTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATimesTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivTerm(node);
    }

    public void inAModTerm(AModTerm node)
    {
        defaultIn(node);
    }

    public void outAModTerm(AModTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModTerm(AModTerm node)
    {
        inAModTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAModTerm(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAParExprFactor(AParExprFactor node)
    {
        defaultIn(node);
    }

    public void outAParExprFactor(AParExprFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExprFactor(AParExprFactor node)
    {
        inAParExprFactor(node);
        if(node.getClosePar() != null)
        {
            node.getClosePar().apply(this);
        }
        if(node.getNumericExpr() != null)
        {
            node.getNumericExpr().apply(this);
        }
        if(node.getOpenPar() != null)
        {
            node.getOpenPar().apply(this);
        }
        outAParExprFactor(node);
    }

    public void inALValueFactor(ALValueFactor node)
    {
        defaultIn(node);
    }

    public void outALValueFactor(ALValueFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValueFactor(ALValueFactor node)
    {
        inALValueFactor(node);
        if(node.getLVal() != null)
        {
            node.getLVal().apply(this);
        }
        outALValueFactor(node);
    }

    public void inACharConstFactor(ACharConstFactor node)
    {
        defaultIn(node);
    }

    public void outACharConstFactor(ACharConstFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharConstFactor(ACharConstFactor node)
    {
        inACharConstFactor(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outACharConstFactor(node);
    }

    public void inANumberFactor(ANumberFactor node)
    {
        defaultIn(node);
    }

    public void outANumberFactor(ANumberFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberFactor(ANumberFactor node)
    {
        inANumberFactor(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberFactor(node);
    }

    public void inACondCondition(ACondCondition node)
    {
        defaultIn(node);
    }

    public void outACondCondition(ACondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondCondition(ACondCondition node)
    {
        inACondCondition(node);
        if(node.getAndCond() != null)
        {
            node.getAndCond().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        outACondCondition(node);
    }

    public void inAAndCondCondition(AAndCondCondition node)
    {
        defaultIn(node);
    }

    public void outAAndCondCondition(AAndCondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCondCondition(AAndCondCondition node)
    {
        inAAndCondCondition(node);
        if(node.getAndCond() != null)
        {
            node.getAndCond().apply(this);
        }
        outAAndCondCondition(node);
    }

    public void inAAndCondAndCond(AAndCondAndCond node)
    {
        defaultIn(node);
    }

    public void outAAndCondAndCond(AAndCondAndCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCondAndCond(AAndCondAndCond node)
    {
        inAAndCondAndCond(node);
        if(node.getNotCond() != null)
        {
            node.getNotCond().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getAndCond() != null)
        {
            node.getAndCond().apply(this);
        }
        outAAndCondAndCond(node);
    }

    public void inANotCondAndCond(ANotCondAndCond node)
    {
        defaultIn(node);
    }

    public void outANotCondAndCond(ANotCondAndCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotCondAndCond(ANotCondAndCond node)
    {
        inANotCondAndCond(node);
        if(node.getNotCond() != null)
        {
            node.getNotCond().apply(this);
        }
        outANotCondAndCond(node);
    }

    public void inANotCondNotCond(ANotCondNotCond node)
    {
        defaultIn(node);
    }

    public void outANotCondNotCond(ANotCondNotCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotCondNotCond(ANotCondNotCond node)
    {
        inANotCondNotCond(node);
        if(node.getOperatorCond() != null)
        {
            node.getOperatorCond().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotCondNotCond(node);
    }

    public void inAOperatorCondNotCond(AOperatorCondNotCond node)
    {
        defaultIn(node);
    }

    public void outAOperatorCondNotCond(AOperatorCondNotCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperatorCondNotCond(AOperatorCondNotCond node)
    {
        inAOperatorCondNotCond(node);
        if(node.getOperatorCond() != null)
        {
            node.getOperatorCond().apply(this);
        }
        outAOperatorCondNotCond(node);
    }

    public void inAOperatorCondOperatorCond(AOperatorCondOperatorCond node)
    {
        defaultIn(node);
    }

    public void outAOperatorCondOperatorCond(AOperatorCondOperatorCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperatorCondOperatorCond(AOperatorCondOperatorCond node)
    {
        inAOperatorCondOperatorCond(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getCompOperator() != null)
        {
            node.getCompOperator().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOperatorCondOperatorCond(node);
    }

    public void inAParCondOperatorCond(AParCondOperatorCond node)
    {
        defaultIn(node);
    }

    public void outAParCondOperatorCond(AParCondOperatorCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParCondOperatorCond(AParCondOperatorCond node)
    {
        inAParCondOperatorCond(node);
        if(node.getParCond() != null)
        {
            node.getParCond().apply(this);
        }
        outAParCondOperatorCond(node);
    }

    public void inAParCondParCond(AParCondParCond node)
    {
        defaultIn(node);
    }

    public void outAParCondParCond(AParCondParCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParCondParCond(AParCondParCond node)
    {
        inAParCondParCond(node);
        if(node.getClosePar() != null)
        {
            node.getClosePar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getOpenPar() != null)
        {
            node.getOpenPar().apply(this);
        }
        outAParCondParCond(node);
    }
}
