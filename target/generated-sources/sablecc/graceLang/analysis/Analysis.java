/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.analysis;

import graceLang.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFuncDef(AFuncDef node);
    void caseAHeader(AHeader node);
    void caseAParamDef(AParamDef node);
    void caseAMoreParamDef(AMoreParamDef node);
    void caseAMultipleParams(AMultipleParams node);
    void caseAParType(AParType node);
    void caseAFuncLocalDef(AFuncLocalDef node);
    void caseAFuncDeclLocalDef(AFuncDeclLocalDef node);
    void caseAVarDeclLocalDef(AVarDeclLocalDef node);
    void caseABlock(ABlock node);
    void caseAFuncDecl(AFuncDecl node);
    void caseAVarDecl(AVarDecl node);
    void caseAArrayInit(AArrayInit node);
    void caseAMoreIds(AMoreIds node);
    void caseADataIntDataType(ADataIntDataType node);
    void caseADataCharDataType(ADataCharDataType node);
    void caseAType(AType node);
    void caseARetNothingRetType(ARetNothingRetType node);
    void caseARetDataTypeRetType(ARetDataTypeRetType node);
    void caseASepStatement(ASepStatement node);
    void caseALValAssStatement(ALValAssStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseARetStStatement(ARetStStatement node);
    void caseAFuncCallStatement(AFuncCallStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAWhileSt(AWhileSt node);
    void caseAWhileWElse(AWhileWElse node);
    void caseAIfSt(AIfSt node);
    void caseAIfHeader(AIfHeader node);
    void caseANoElseIfTail(ANoElseIfTail node);
    void caseAElseIfTail(AElseIfTail node);
    void caseASepStWElse(ASepStWElse node);
    void caseALValAssStWElse(ALValAssStWElse node);
    void caseABlockStWElse(ABlockStWElse node);
    void caseARetStStWElse(ARetStStWElse node);
    void caseAFuncCallStWElse(AFuncCallStWElse node);
    void caseAIfStWElse(AIfStWElse node);
    void caseAWhileStWElse(AWhileStWElse node);
    void caseAIfElse(AIfElse node);
    void caseARetSt(ARetSt node);
    void caseAFuncCall(AFuncCall node);
    void caseAFuncParams(AFuncParams node);
    void caseAMultFuncParams(AMultFuncParams node);
    void caseALValWOffs(ALValWOffs node);
    void caseALValIdLVal(ALValIdLVal node);
    void caseALValStrLVal(ALValStrLVal node);
    void caseALValOffsLVal(ALValOffsLVal node);
    void caseAOffs(AOffs node);
    void caseALValSimpleLValAssign(ALValSimpleLValAssign node);
    void caseAFuncCallExpression(AFuncCallExpression node);
    void caseANumericExpression(ANumericExpression node);
    void caseAPlusNumericExpr(APlusNumericExpr node);
    void caseAMinusNumericExpr(AMinusNumericExpr node);
    void caseATermNumericExpr(ATermNumericExpr node);
    void caseATimesTerm(ATimesTerm node);
    void caseADivTerm(ADivTerm node);
    void caseAModTerm(AModTerm node);
    void caseAFactorTerm(AFactorTerm node);
    void caseAParExprFactor(AParExprFactor node);
    void caseALValueFactor(ALValueFactor node);
    void caseACharConstFactor(ACharConstFactor node);
    void caseANumberFactor(ANumberFactor node);
    void caseACondCondition(ACondCondition node);
    void caseAAndCondCondition(AAndCondCondition node);
    void caseAAndCondAndCond(AAndCondAndCond node);
    void caseANotCondAndCond(ANotCondAndCond node);
    void caseANotCondNotCond(ANotCondNotCond node);
    void caseAOperatorCondNotCond(AOperatorCondNotCond node);
    void caseAOperatorCondOperatorCond(AOperatorCondOperatorCond node);
    void caseAParCondOperatorCond(AParCondOperatorCond node);
    void caseAParCondParCond(AParCondParCond node);

    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAssign(TAssign node);
    void caseTChar(TChar node);
    void caseTInt(TInt node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTNot(TNot node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTNlE(TNlE node);
    void caseTTabE(TTabE node);
    void caseTCrE(TCrE node);
    void caseTNullTermE(TNullTermE node);
    void caseTBackslashE(TBackslashE node);
    void caseTApostropheE(TApostropheE node);
    void caseTQuotesE(TQuotesE node);
    void caseTHexaE(THexaE node);
    void caseTVar(TVar node);
    void caseTAs(TAs node);
    void caseTFun(TFun node);
    void caseTNothing(TNothing node);
    void caseTRef(TRef node);
    void caseTReturn(TReturn node);
    void caseTOpenPar(TOpenPar node);
    void caseTClosePar(TClosePar node);
    void caseTOpenCbrack(TOpenCbrack node);
    void caseTCloseCbrack(TCloseCbrack node);
    void caseTOpenBrack(TOpenBrack node);
    void caseTCloseBrack(TCloseBrack node);
    void caseTComma(TComma node);
    void caseTOcBrack(TOcBrack node);
    void caseTSeparator(TSeparator node);
    void caseTNumber(TNumber node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseTMultComment(TMultComment node);
    void caseTOperation(TOperation node);
    void caseTCompOperator(TCompOperator node);
    void caseTId(TId node);
    void caseTCharConst(TCharConst node);
    void caseTStringConst(TStringConst node);
    void caseTNumOrId(TNumOrId node);
    void caseEOF(EOF node);
}
