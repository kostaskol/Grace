/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import java.util.*;
import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class AHeader extends PHeader
{
    private TFun _fun_;
    private TId _id_;
    private TOpenPar _openPar_;
    private final LinkedList<PParamDef> _paramDef_ = new LinkedList<PParamDef>();
    private TClosePar _closePar_;
    private TAs _as_;
    private PRetType _retType_;

    public AHeader()
    {
        // Constructor
    }

    public AHeader(
        @SuppressWarnings("hiding") TFun _fun_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TOpenPar _openPar_,
        @SuppressWarnings("hiding") List<PParamDef> _paramDef_,
        @SuppressWarnings("hiding") TClosePar _closePar_,
        @SuppressWarnings("hiding") TAs _as_,
        @SuppressWarnings("hiding") PRetType _retType_)
    {
        // Constructor
        setFun(_fun_);

        setId(_id_);

        setOpenPar(_openPar_);

        setParamDef(_paramDef_);

        setClosePar(_closePar_);

        setAs(_as_);

        setRetType(_retType_);

    }

    @Override
    public Object clone()
    {
        return new AHeader(
            cloneNode(this._fun_),
            cloneNode(this._id_),
            cloneNode(this._openPar_),
            cloneList(this._paramDef_),
            cloneNode(this._closePar_),
            cloneNode(this._as_),
            cloneNode(this._retType_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHeader(this);
    }

    public TFun getFun()
    {
        return this._fun_;
    }

    public void setFun(TFun node)
    {
        if(this._fun_ != null)
        {
            this._fun_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fun_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TOpenPar getOpenPar()
    {
        return this._openPar_;
    }

    public void setOpenPar(TOpenPar node)
    {
        if(this._openPar_ != null)
        {
            this._openPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openPar_ = node;
    }

    public LinkedList<PParamDef> getParamDef()
    {
        return this._paramDef_;
    }

    public void setParamDef(List<PParamDef> list)
    {
        this._paramDef_.clear();
        this._paramDef_.addAll(list);
        for(PParamDef e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TClosePar getClosePar()
    {
        return this._closePar_;
    }

    public void setClosePar(TClosePar node)
    {
        if(this._closePar_ != null)
        {
            this._closePar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closePar_ = node;
    }

    public TAs getAs()
    {
        return this._as_;
    }

    public void setAs(TAs node)
    {
        if(this._as_ != null)
        {
            this._as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._as_ = node;
    }

    public PRetType getRetType()
    {
        return this._retType_;
    }

    public void setRetType(PRetType node)
    {
        if(this._retType_ != null)
        {
            this._retType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._retType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fun_)
            + toString(this._id_)
            + toString(this._openPar_)
            + toString(this._paramDef_)
            + toString(this._closePar_)
            + toString(this._as_)
            + toString(this._retType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fun_ == child)
        {
            this._fun_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._openPar_ == child)
        {
            this._openPar_ = null;
            return;
        }

        if(this._paramDef_.remove(child))
        {
            return;
        }

        if(this._closePar_ == child)
        {
            this._closePar_ = null;
            return;
        }

        if(this._as_ == child)
        {
            this._as_ = null;
            return;
        }

        if(this._retType_ == child)
        {
            this._retType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fun_ == oldChild)
        {
            setFun((TFun) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._openPar_ == oldChild)
        {
            setOpenPar((TOpenPar) newChild);
            return;
        }

        for(ListIterator<PParamDef> i = this._paramDef_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParamDef) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._closePar_ == oldChild)
        {
            setClosePar((TClosePar) newChild);
            return;
        }

        if(this._as_ == oldChild)
        {
            setAs((TAs) newChild);
            return;
        }

        if(this._retType_ == oldChild)
        {
            setRetType((PRetType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
