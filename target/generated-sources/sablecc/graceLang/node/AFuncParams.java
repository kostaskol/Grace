/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import java.util.*;
import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class AFuncParams extends PFuncParams
{
    private PExpression _expression_;
    private final LinkedList<PMultFuncParams> _multFuncParams_ = new LinkedList<PMultFuncParams>();

    public AFuncParams()
    {
        // Constructor
    }

    public AFuncParams(
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") List<PMultFuncParams> _multFuncParams_)
    {
        // Constructor
        setExpression(_expression_);

        setMultFuncParams(_multFuncParams_);

    }

    @Override
    public Object clone()
    {
        return new AFuncParams(
            cloneNode(this._expression_),
            cloneList(this._multFuncParams_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFuncParams(this);
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public LinkedList<PMultFuncParams> getMultFuncParams()
    {
        return this._multFuncParams_;
    }

    public void setMultFuncParams(List<PMultFuncParams> list)
    {
        this._multFuncParams_.clear();
        this._multFuncParams_.addAll(list);
        for(PMultFuncParams e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expression_)
            + toString(this._multFuncParams_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._multFuncParams_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator<PMultFuncParams> i = this._multFuncParams_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMultFuncParams) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
