/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class AArrayInit extends PArrayInit
{
    private TOpenBrack _openBrack_;
    private TNumber _number_;
    private TCloseBrack _closeBrack_;

    public AArrayInit()
    {
        // Constructor
    }

    public AArrayInit(
        @SuppressWarnings("hiding") TOpenBrack _openBrack_,
        @SuppressWarnings("hiding") TNumber _number_,
        @SuppressWarnings("hiding") TCloseBrack _closeBrack_)
    {
        // Constructor
        setOpenBrack(_openBrack_);

        setNumber(_number_);

        setCloseBrack(_closeBrack_);

    }

    @Override
    public Object clone()
    {
        return new AArrayInit(
            cloneNode(this._openBrack_),
            cloneNode(this._number_),
            cloneNode(this._closeBrack_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayInit(this);
    }

    public TOpenBrack getOpenBrack()
    {
        return this._openBrack_;
    }

    public void setOpenBrack(TOpenBrack node)
    {
        if(this._openBrack_ != null)
        {
            this._openBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openBrack_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public TCloseBrack getCloseBrack()
    {
        return this._closeBrack_;
    }

    public void setCloseBrack(TCloseBrack node)
    {
        if(this._closeBrack_ != null)
        {
            this._closeBrack_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closeBrack_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._openBrack_)
            + toString(this._number_)
            + toString(this._closeBrack_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._openBrack_ == child)
        {
            this._openBrack_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._closeBrack_ == child)
        {
            this._closeBrack_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._openBrack_ == oldChild)
        {
            setOpenBrack((TOpenBrack) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        if(this._closeBrack_ == oldChild)
        {
            setCloseBrack((TCloseBrack) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
