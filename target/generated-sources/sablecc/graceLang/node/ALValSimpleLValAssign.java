/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class ALValSimpleLValAssign extends PLValAssign
{
    private PLVal _lVal_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TSeparator _separator_;

    public ALValSimpleLValAssign()
    {
        // Constructor
    }

    public ALValSimpleLValAssign(
        @SuppressWarnings("hiding") PLVal _lVal_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TSeparator _separator_)
    {
        // Constructor
        setLVal(_lVal_);

        setAssign(_assign_);

        setExpression(_expression_);

        setSeparator(_separator_);

    }

    @Override
    public Object clone()
    {
        return new ALValSimpleLValAssign(
            cloneNode(this._lVal_),
            cloneNode(this._assign_),
            cloneNode(this._expression_),
            cloneNode(this._separator_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALValSimpleLValAssign(this);
    }

    public PLVal getLVal()
    {
        return this._lVal_;
    }

    public void setLVal(PLVal node)
    {
        if(this._lVal_ != null)
        {
            this._lVal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lVal_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TSeparator getSeparator()
    {
        return this._separator_;
    }

    public void setSeparator(TSeparator node)
    {
        if(this._separator_ != null)
        {
            this._separator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._separator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lVal_)
            + toString(this._assign_)
            + toString(this._expression_)
            + toString(this._separator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lVal_ == child)
        {
            this._lVal_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._separator_ == child)
        {
            this._separator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lVal_ == oldChild)
        {
            setLVal((PLVal) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._separator_ == oldChild)
        {
            setSeparator((TSeparator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
