/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class AFuncCall extends PFuncCall
{
    private TId _id_;
    private TOpenPar _openPar_;
    private PFuncParams _funcParams_;
    private TClosePar _closePar_;
    private TSeparator _separator_;

    public AFuncCall()
    {
        // Constructor
    }

    public AFuncCall(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TOpenPar _openPar_,
        @SuppressWarnings("hiding") PFuncParams _funcParams_,
        @SuppressWarnings("hiding") TClosePar _closePar_,
        @SuppressWarnings("hiding") TSeparator _separator_)
    {
        // Constructor
        setId(_id_);

        setOpenPar(_openPar_);

        setFuncParams(_funcParams_);

        setClosePar(_closePar_);

        setSeparator(_separator_);

    }

    @Override
    public Object clone()
    {
        return new AFuncCall(
            cloneNode(this._id_),
            cloneNode(this._openPar_),
            cloneNode(this._funcParams_),
            cloneNode(this._closePar_),
            cloneNode(this._separator_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFuncCall(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TOpenPar getOpenPar()
    {
        return this._openPar_;
    }

    public void setOpenPar(TOpenPar node)
    {
        if(this._openPar_ != null)
        {
            this._openPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openPar_ = node;
    }

    public PFuncParams getFuncParams()
    {
        return this._funcParams_;
    }

    public void setFuncParams(PFuncParams node)
    {
        if(this._funcParams_ != null)
        {
            this._funcParams_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcParams_ = node;
    }

    public TClosePar getClosePar()
    {
        return this._closePar_;
    }

    public void setClosePar(TClosePar node)
    {
        if(this._closePar_ != null)
        {
            this._closePar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closePar_ = node;
    }

    public TSeparator getSeparator()
    {
        return this._separator_;
    }

    public void setSeparator(TSeparator node)
    {
        if(this._separator_ != null)
        {
            this._separator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._separator_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._openPar_)
            + toString(this._funcParams_)
            + toString(this._closePar_)
            + toString(this._separator_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._openPar_ == child)
        {
            this._openPar_ = null;
            return;
        }

        if(this._funcParams_ == child)
        {
            this._funcParams_ = null;
            return;
        }

        if(this._closePar_ == child)
        {
            this._closePar_ = null;
            return;
        }

        if(this._separator_ == child)
        {
            this._separator_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._openPar_ == oldChild)
        {
            setOpenPar((TOpenPar) newChild);
            return;
        }

        if(this._funcParams_ == oldChild)
        {
            setFuncParams((PFuncParams) newChild);
            return;
        }

        if(this._closePar_ == oldChild)
        {
            setClosePar((TClosePar) newChild);
            return;
        }

        if(this._separator_ == oldChild)
        {
            setSeparator((TSeparator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
