/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class AElseIfTail extends PIfTail
{
    private PStWElse _stWElse_;
    private TElse _else_;
    private PStatement _statement_;

    public AElseIfTail()
    {
        // Constructor
    }

    public AElseIfTail(
        @SuppressWarnings("hiding") PStWElse _stWElse_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PStatement _statement_)
    {
        // Constructor
        setStWElse(_stWElse_);

        setElse(_else_);

        setStatement(_statement_);

    }

    @Override
    public Object clone()
    {
        return new AElseIfTail(
            cloneNode(this._stWElse_),
            cloneNode(this._else_),
            cloneNode(this._statement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseIfTail(this);
    }

    public PStWElse getStWElse()
    {
        return this._stWElse_;
    }

    public void setStWElse(PStWElse node)
    {
        if(this._stWElse_ != null)
        {
            this._stWElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stWElse_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stWElse_)
            + toString(this._else_)
            + toString(this._statement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stWElse_ == child)
        {
            this._stWElse_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stWElse_ == oldChild)
        {
            setStWElse((PStWElse) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
