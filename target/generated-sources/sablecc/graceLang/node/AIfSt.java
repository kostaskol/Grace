/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class AIfSt extends PIfSt
{
    private PIfHeader _ifHeader_;
    private PIfTail _ifTail_;

    public AIfSt()
    {
        // Constructor
    }

    public AIfSt(
        @SuppressWarnings("hiding") PIfHeader _ifHeader_,
        @SuppressWarnings("hiding") PIfTail _ifTail_)
    {
        // Constructor
        setIfHeader(_ifHeader_);

        setIfTail(_ifTail_);

    }

    @Override
    public Object clone()
    {
        return new AIfSt(
            cloneNode(this._ifHeader_),
            cloneNode(this._ifTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfSt(this);
    }

    public PIfHeader getIfHeader()
    {
        return this._ifHeader_;
    }

    public void setIfHeader(PIfHeader node)
    {
        if(this._ifHeader_ != null)
        {
            this._ifHeader_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifHeader_ = node;
    }

    public PIfTail getIfTail()
    {
        return this._ifTail_;
    }

    public void setIfTail(PIfTail node)
    {
        if(this._ifTail_ != null)
        {
            this._ifTail_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifTail_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifHeader_)
            + toString(this._ifTail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifHeader_ == child)
        {
            this._ifHeader_ = null;
            return;
        }

        if(this._ifTail_ == child)
        {
            this._ifTail_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifHeader_ == oldChild)
        {
            setIfHeader((PIfHeader) newChild);
            return;
        }

        if(this._ifTail_ == oldChild)
        {
            setIfTail((PIfTail) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
