/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class AWhileWElse extends PWhileWElse
{
    private TWhile _while_;
    private PCondition _condition_;
    private TDo _do_;
    private PStWElse _stWElse_;

    public AWhileWElse()
    {
        // Constructor
    }

    public AWhileWElse(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PCondition _condition_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PStWElse _stWElse_)
    {
        // Constructor
        setWhile(_while_);

        setCondition(_condition_);

        setDo(_do_);

        setStWElse(_stWElse_);

    }

    @Override
    public Object clone()
    {
        return new AWhileWElse(
            cloneNode(this._while_),
            cloneNode(this._condition_),
            cloneNode(this._do_),
            cloneNode(this._stWElse_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileWElse(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PCondition getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PCondition node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PStWElse getStWElse()
    {
        return this._stWElse_;
    }

    public void setStWElse(PStWElse node)
    {
        if(this._stWElse_ != null)
        {
            this._stWElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stWElse_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._condition_)
            + toString(this._do_)
            + toString(this._stWElse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._stWElse_ == child)
        {
            this._stWElse_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._condition_ == oldChild)
        {
            setCondition((PCondition) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._stWElse_ == oldChild)
        {
            setStWElse((PStWElse) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
