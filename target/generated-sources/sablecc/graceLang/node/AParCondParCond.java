/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.node;

import graceLang.analysis.*;

@SuppressWarnings("nls")
public final class AParCondParCond extends PParCond
{
    private TOpenPar _openPar_;
    private PCondition _condition_;
    private TClosePar _closePar_;

    public AParCondParCond()
    {
        // Constructor
    }

    public AParCondParCond(
        @SuppressWarnings("hiding") TOpenPar _openPar_,
        @SuppressWarnings("hiding") PCondition _condition_,
        @SuppressWarnings("hiding") TClosePar _closePar_)
    {
        // Constructor
        setOpenPar(_openPar_);

        setCondition(_condition_);

        setClosePar(_closePar_);

    }

    @Override
    public Object clone()
    {
        return new AParCondParCond(
            cloneNode(this._openPar_),
            cloneNode(this._condition_),
            cloneNode(this._closePar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParCondParCond(this);
    }

    public TOpenPar getOpenPar()
    {
        return this._openPar_;
    }

    public void setOpenPar(TOpenPar node)
    {
        if(this._openPar_ != null)
        {
            this._openPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._openPar_ = node;
    }

    public PCondition getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PCondition node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public TClosePar getClosePar()
    {
        return this._closePar_;
    }

    public void setClosePar(TClosePar node)
    {
        if(this._closePar_ != null)
        {
            this._closePar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._closePar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._openPar_)
            + toString(this._condition_)
            + toString(this._closePar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._openPar_ == child)
        {
            this._openPar_ = null;
            return;
        }

        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._closePar_ == child)
        {
            this._closePar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._openPar_ == oldChild)
        {
            setOpenPar((TOpenPar) newChild);
            return;
        }

        if(this._condition_ == oldChild)
        {
            setCondition((PCondition) newChild);
            return;
        }

        if(this._closePar_ == oldChild)
        {
            setClosePar((TClosePar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
