/* This file was generated by SableCC (http://www.sablecc.org/). */

package graceLang.parser;

import graceLang.lexer.*;
import graceLang.node.*;
import graceLang.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAfuncdef1FuncDef */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAfuncdef2FuncDef */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAheader1Header */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce AAheader2Header */
		    {
			ArrayList list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AAparamdef1ParamDef */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AAparamdef2ParamDef */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AAparamdef3ParamDef */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AAparamdef4ParamDef */
		    {
			ArrayList list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce AAparamdef5ParamDef */
		    {
			ArrayList list = new9();
			push(goTo(3), list, false);
		    }
		    break;
                    case 10: /* reduce AAparamdef6ParamDef */
		    {
			ArrayList list = new10();
			push(goTo(3), list, false);
		    }
		    break;
                    case 11: /* reduce AAparamdef7ParamDef */
		    {
			ArrayList list = new11();
			push(goTo(3), list, false);
		    }
		    break;
                    case 12: /* reduce AAparamdef8ParamDef */
		    {
			ArrayList list = new12();
			push(goTo(3), list, false);
		    }
		    break;
                    case 13: /* reduce AMoreParamDef */
		    {
			ArrayList list = new13();
			push(goTo(4), list, false);
		    }
		    break;
                    case 14: /* reduce AMultipleParams */
		    {
			ArrayList list = new14();
			push(goTo(5), list, false);
		    }
		    break;
                    case 15: /* reduce AApartype1ParType */
		    {
			ArrayList list = new15();
			push(goTo(6), list, false);
		    }
		    break;
                    case 16: /* reduce AApartype2ParType */
		    {
			ArrayList list = new16();
			push(goTo(6), list, false);
		    }
		    break;
                    case 17: /* reduce AFuncLocalDef */
		    {
			ArrayList list = new17();
			push(goTo(7), list, false);
		    }
		    break;
                    case 18: /* reduce AFuncDeclLocalDef */
		    {
			ArrayList list = new18();
			push(goTo(7), list, false);
		    }
		    break;
                    case 19: /* reduce AVarDeclLocalDef */
		    {
			ArrayList list = new19();
			push(goTo(7), list, false);
		    }
		    break;
                    case 20: /* reduce AAblock1Block */
		    {
			ArrayList list = new20();
			push(goTo(8), list, false);
		    }
		    break;
                    case 21: /* reduce AAblock2Block */
		    {
			ArrayList list = new21();
			push(goTo(8), list, false);
		    }
		    break;
                    case 22: /* reduce AFuncDecl */
		    {
			ArrayList list = new22();
			push(goTo(9), list, false);
		    }
		    break;
                    case 23: /* reduce AAvardecl1VarDecl */
		    {
			ArrayList list = new23();
			push(goTo(10), list, false);
		    }
		    break;
                    case 24: /* reduce AAvardecl2VarDecl */
		    {
			ArrayList list = new24();
			push(goTo(10), list, false);
		    }
		    break;
                    case 25: /* reduce AAvardecl3VarDecl */
		    {
			ArrayList list = new25();
			push(goTo(10), list, false);
		    }
		    break;
                    case 26: /* reduce AAvardecl4VarDecl */
		    {
			ArrayList list = new26();
			push(goTo(10), list, false);
		    }
		    break;
                    case 27: /* reduce AArrayInit */
		    {
			ArrayList list = new27();
			push(goTo(11), list, false);
		    }
		    break;
                    case 28: /* reduce AMoreIds */
		    {
			ArrayList list = new28();
			push(goTo(12), list, false);
		    }
		    break;
                    case 29: /* reduce ADataIntDataType */
		    {
			ArrayList list = new29();
			push(goTo(13), list, false);
		    }
		    break;
                    case 30: /* reduce ADataCharDataType */
		    {
			ArrayList list = new30();
			push(goTo(13), list, false);
		    }
		    break;
                    case 31: /* reduce AAtype1Type */
		    {
			ArrayList list = new31();
			push(goTo(14), list, false);
		    }
		    break;
                    case 32: /* reduce AAtype2Type */
		    {
			ArrayList list = new32();
			push(goTo(14), list, false);
		    }
		    break;
                    case 33: /* reduce ARetNothingRetType */
		    {
			ArrayList list = new33();
			push(goTo(15), list, false);
		    }
		    break;
                    case 34: /* reduce ARetDataTypeRetType */
		    {
			ArrayList list = new34();
			push(goTo(15), list, false);
		    }
		    break;
                    case 35: /* reduce ASepStatement */
		    {
			ArrayList list = new35();
			push(goTo(16), list, false);
		    }
		    break;
                    case 36: /* reduce ALValAssStatement */
		    {
			ArrayList list = new36();
			push(goTo(16), list, false);
		    }
		    break;
                    case 37: /* reduce ABlockStatement */
		    {
			ArrayList list = new37();
			push(goTo(16), list, false);
		    }
		    break;
                    case 38: /* reduce AIfStatement */
		    {
			ArrayList list = new38();
			push(goTo(16), list, false);
		    }
		    break;
                    case 39: /* reduce ARetStStatement */
		    {
			ArrayList list = new39();
			push(goTo(16), list, false);
		    }
		    break;
                    case 40: /* reduce AFuncCallStatement */
		    {
			ArrayList list = new40();
			push(goTo(16), list, false);
		    }
		    break;
                    case 41: /* reduce AWhileStatement */
		    {
			ArrayList list = new41();
			push(goTo(16), list, false);
		    }
		    break;
                    case 42: /* reduce AWhileSt */
		    {
			ArrayList list = new42();
			push(goTo(17), list, false);
		    }
		    break;
                    case 43: /* reduce AWhileWElse */
		    {
			ArrayList list = new43();
			push(goTo(18), list, false);
		    }
		    break;
                    case 44: /* reduce AIfSt */
		    {
			ArrayList list = new44();
			push(goTo(19), list, false);
		    }
		    break;
                    case 45: /* reduce AIfHeader */
		    {
			ArrayList list = new45();
			push(goTo(20), list, false);
		    }
		    break;
                    case 46: /* reduce ANoElseIfTail */
		    {
			ArrayList list = new46();
			push(goTo(21), list, false);
		    }
		    break;
                    case 47: /* reduce AElseIfTail */
		    {
			ArrayList list = new47();
			push(goTo(21), list, false);
		    }
		    break;
                    case 48: /* reduce ASepStWElse */
		    {
			ArrayList list = new48();
			push(goTo(22), list, false);
		    }
		    break;
                    case 49: /* reduce ALValAssStWElse */
		    {
			ArrayList list = new49();
			push(goTo(22), list, false);
		    }
		    break;
                    case 50: /* reduce ABlockStWElse */
		    {
			ArrayList list = new50();
			push(goTo(22), list, false);
		    }
		    break;
                    case 51: /* reduce ARetStStWElse */
		    {
			ArrayList list = new51();
			push(goTo(22), list, false);
		    }
		    break;
                    case 52: /* reduce AFuncCallStWElse */
		    {
			ArrayList list = new52();
			push(goTo(22), list, false);
		    }
		    break;
                    case 53: /* reduce AIfStWElse */
		    {
			ArrayList list = new53();
			push(goTo(22), list, false);
		    }
		    break;
                    case 54: /* reduce AWhileStWElse */
		    {
			ArrayList list = new54();
			push(goTo(22), list, false);
		    }
		    break;
                    case 55: /* reduce AIfElse */
		    {
			ArrayList list = new55();
			push(goTo(23), list, false);
		    }
		    break;
                    case 56: /* reduce AAretst1RetSt */
		    {
			ArrayList list = new56();
			push(goTo(24), list, false);
		    }
		    break;
                    case 57: /* reduce AAretst2RetSt */
		    {
			ArrayList list = new57();
			push(goTo(24), list, false);
		    }
		    break;
                    case 58: /* reduce AAfunccall1FuncCall */
		    {
			ArrayList list = new58();
			push(goTo(25), list, false);
		    }
		    break;
                    case 59: /* reduce AAfunccall2FuncCall */
		    {
			ArrayList list = new59();
			push(goTo(25), list, false);
		    }
		    break;
                    case 60: /* reduce AAfuncparams1FuncParams */
		    {
			ArrayList list = new60();
			push(goTo(26), list, false);
		    }
		    break;
                    case 61: /* reduce AAfuncparams2FuncParams */
		    {
			ArrayList list = new61();
			push(goTo(26), list, false);
		    }
		    break;
                    case 62: /* reduce AMultFuncParams */
		    {
			ArrayList list = new62();
			push(goTo(27), list, false);
		    }
		    break;
                    case 63: /* reduce ALValWOffs */
		    {
			ArrayList list = new63();
			push(goTo(28), list, false);
		    }
		    break;
                    case 64: /* reduce ALValIdLVal */
		    {
			ArrayList list = new64();
			push(goTo(29), list, false);
		    }
		    break;
                    case 65: /* reduce ALValStrLVal */
		    {
			ArrayList list = new65();
			push(goTo(29), list, false);
		    }
		    break;
                    case 66: /* reduce ALValOffsLVal */
		    {
			ArrayList list = new66();
			push(goTo(29), list, false);
		    }
		    break;
                    case 67: /* reduce AOffs */
		    {
			ArrayList list = new67();
			push(goTo(30), list, false);
		    }
		    break;
                    case 68: /* reduce ALValSimpleLValAssign */
		    {
			ArrayList list = new68();
			push(goTo(31), list, false);
		    }
		    break;
                    case 69: /* reduce AFuncCallExpression */
		    {
			ArrayList list = new69();
			push(goTo(32), list, false);
		    }
		    break;
                    case 70: /* reduce ANumericExpression */
		    {
			ArrayList list = new70();
			push(goTo(32), list, false);
		    }
		    break;
                    case 71: /* reduce APlusNumericExpr */
		    {
			ArrayList list = new71();
			push(goTo(33), list, false);
		    }
		    break;
                    case 72: /* reduce AMinusNumericExpr */
		    {
			ArrayList list = new72();
			push(goTo(33), list, false);
		    }
		    break;
                    case 73: /* reduce ATermNumericExpr */
		    {
			ArrayList list = new73();
			push(goTo(33), list, false);
		    }
		    break;
                    case 74: /* reduce ATimesTerm */
		    {
			ArrayList list = new74();
			push(goTo(34), list, false);
		    }
		    break;
                    case 75: /* reduce ADivTerm */
		    {
			ArrayList list = new75();
			push(goTo(34), list, false);
		    }
		    break;
                    case 76: /* reduce AModTerm */
		    {
			ArrayList list = new76();
			push(goTo(34), list, false);
		    }
		    break;
                    case 77: /* reduce AFactorTerm */
		    {
			ArrayList list = new77();
			push(goTo(34), list, false);
		    }
		    break;
                    case 78: /* reduce AParExprFactor */
		    {
			ArrayList list = new78();
			push(goTo(35), list, false);
		    }
		    break;
                    case 79: /* reduce ALValueFactor */
		    {
			ArrayList list = new79();
			push(goTo(35), list, false);
		    }
		    break;
                    case 80: /* reduce ACharConstFactor */
		    {
			ArrayList list = new80();
			push(goTo(35), list, false);
		    }
		    break;
                    case 81: /* reduce ANumberFactor */
		    {
			ArrayList list = new81();
			push(goTo(35), list, false);
		    }
		    break;
                    case 82: /* reduce ACondCondition */
		    {
			ArrayList list = new82();
			push(goTo(36), list, false);
		    }
		    break;
                    case 83: /* reduce AAndCondCondition */
		    {
			ArrayList list = new83();
			push(goTo(36), list, false);
		    }
		    break;
                    case 84: /* reduce AAndCondAndCond */
		    {
			ArrayList list = new84();
			push(goTo(37), list, false);
		    }
		    break;
                    case 85: /* reduce ANotCondAndCond */
		    {
			ArrayList list = new85();
			push(goTo(37), list, false);
		    }
		    break;
                    case 86: /* reduce ANotCondNotCond */
		    {
			ArrayList list = new86();
			push(goTo(38), list, false);
		    }
		    break;
                    case 87: /* reduce AOperatorCondNotCond */
		    {
			ArrayList list = new87();
			push(goTo(38), list, false);
		    }
		    break;
                    case 88: /* reduce AOperatorCondOperatorCond */
		    {
			ArrayList list = new88();
			push(goTo(39), list, false);
		    }
		    break;
                    case 89: /* reduce AParCondOperatorCond */
		    {
			ArrayList list = new89();
			push(goTo(39), list, false);
		    }
		    break;
                    case 90: /* reduce AParCondParCond */
		    {
			ArrayList list = new90();
			push(goTo(40), list, false);
		    }
		    break;
                    case 91: /* reduce ATerminal$LocalDef */
		    {
			ArrayList list = new91();
			push(goTo(41), list, true);
		    }
		    break;
                    case 92: /* reduce ANonTerminal$LocalDef */
		    {
			ArrayList list = new92();
			push(goTo(41), list, true);
		    }
		    break;
                    case 93: /* reduce ATerminal$ParamDef */
		    {
			ArrayList list = new93();
			push(goTo(42), list, true);
		    }
		    break;
                    case 94: /* reduce ANonTerminal$ParamDef */
		    {
			ArrayList list = new94();
			push(goTo(42), list, true);
		    }
		    break;
                    case 95: /* reduce ATerminal$MultipleParams */
		    {
			ArrayList list = new95();
			push(goTo(43), list, true);
		    }
		    break;
                    case 96: /* reduce ANonTerminal$MultipleParams */
		    {
			ArrayList list = new96();
			push(goTo(43), list, true);
		    }
		    break;
                    case 97: /* reduce ATerminal$Statement */
		    {
			ArrayList list = new97();
			push(goTo(44), list, true);
		    }
		    break;
                    case 98: /* reduce ANonTerminal$Statement */
		    {
			ArrayList list = new98();
			push(goTo(44), list, true);
		    }
		    break;
                    case 99: /* reduce ATerminal$MoreIds */
		    {
			ArrayList list = new99();
			push(goTo(45), list, true);
		    }
		    break;
                    case 100: /* reduce ANonTerminal$MoreIds */
		    {
			ArrayList list = new100();
			push(goTo(45), list, true);
		    }
		    break;
                    case 101: /* reduce ATerminal$MultFuncParams */
		    {
			ArrayList list = new101();
			push(goTo(46), list, true);
		    }
		    break;
                    case 102: /* reduce ANonTerminal$MultFuncParams */
		    {
			ArrayList list = new102();
			push(goTo(46), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
					System.out.println("Found: " + this.last_token);

                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfuncdefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAfuncdef1FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAfuncdef2FuncDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDef pfuncdefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfuncdefNode1 = new AFuncDef(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfuncdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TOpenPar topenparNode4;
        LinkedList listNode5 = new LinkedList();
        TClosePar tcloseparNode6;
        TAs tasNode7;
        PRetType prettypeNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        topenparNode4 = (TOpenPar)nodeArrayList3.get(0);
        {
            // Block
        }
        tcloseparNode6 = (TClosePar)nodeArrayList4.get(0);
        tasNode7 = (TAs)nodeArrayList5.get(0);
        prettypeNode8 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeader(tfunNode2, tidNode3, topenparNode4, listNode5, tcloseparNode6, tasNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TId tidNode3;
        TOpenPar topenparNode4;
        LinkedList listNode6 = new LinkedList();
        TClosePar tcloseparNode7;
        TAs tasNode8;
        PRetType prettypeNode9;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        topenparNode4 = (TOpenPar)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tcloseparNode7 = (TClosePar)nodeArrayList5.get(0);
        tasNode8 = (TAs)nodeArrayList6.get(0);
        prettypeNode9 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tfunNode2, tidNode3, topenparNode4, listNode6, tcloseparNode7, tasNode8, prettypeNode9);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAparamdef1ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDef pparamdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TAs tasNode5;
        PParType ppartypeNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        tasNode5 = (TAs)nodeArrayList2.get(0);
        ppartypeNode6 = (PParType)nodeArrayList3.get(0);

        pparamdefNode1 = new AParamDef(null, tidNode3, listNode4, tasNode5, ppartypeNode6, null);
        }
	nodeList.add(pparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAparamdef2ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDef pparamdefNode1;
        {
            // Block
        TRef trefNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TAs tasNode5;
        PParType ppartypeNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        tasNode5 = (TAs)nodeArrayList3.get(0);
        ppartypeNode6 = (PParType)nodeArrayList4.get(0);

        pparamdefNode1 = new AParamDef(trefNode2, tidNode3, listNode4, tasNode5, ppartypeNode6, null);
        }
	nodeList.add(pparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAparamdef3ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDef pparamdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TAs tasNode6;
        PParType ppartypeNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tasNode6 = (TAs)nodeArrayList3.get(0);
        ppartypeNode7 = (PParType)nodeArrayList4.get(0);

        pparamdefNode1 = new AParamDef(null, tidNode3, listNode5, tasNode6, ppartypeNode7, null);
        }
	nodeList.add(pparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAparamdef4ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDef pparamdefNode1;
        {
            // Block
        TRef trefNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TAs tasNode6;
        PParType ppartypeNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tasNode6 = (TAs)nodeArrayList4.get(0);
        ppartypeNode7 = (PParType)nodeArrayList5.get(0);

        pparamdefNode1 = new AParamDef(trefNode2, tidNode3, listNode5, tasNode6, ppartypeNode7, null);
        }
	nodeList.add(pparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAparamdef5ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDef pparamdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TAs tasNode5;
        PParType ppartypeNode6;
        PMoreParamDef pmoreparamdefNode7;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        }
        tasNode5 = (TAs)nodeArrayList2.get(0);
        ppartypeNode6 = (PParType)nodeArrayList3.get(0);
        pmoreparamdefNode7 = (PMoreParamDef)nodeArrayList4.get(0);

        pparamdefNode1 = new AParamDef(null, tidNode3, listNode4, tasNode5, ppartypeNode6, pmoreparamdefNode7);
        }
	nodeList.add(pparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAparamdef6ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDef pparamdefNode1;
        {
            // Block
        TRef trefNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TAs tasNode5;
        PParType ppartypeNode6;
        PMoreParamDef pmoreparamdefNode7;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        tasNode5 = (TAs)nodeArrayList3.get(0);
        ppartypeNode6 = (PParType)nodeArrayList4.get(0);
        pmoreparamdefNode7 = (PMoreParamDef)nodeArrayList5.get(0);

        pparamdefNode1 = new AParamDef(trefNode2, tidNode3, listNode4, tasNode5, ppartypeNode6, pmoreparamdefNode7);
        }
	nodeList.add(pparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAparamdef7ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDef pparamdefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TAs tasNode6;
        PParType ppartypeNode7;
        PMoreParamDef pmoreparamdefNode8;
        tidNode3 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tasNode6 = (TAs)nodeArrayList3.get(0);
        ppartypeNode7 = (PParType)nodeArrayList4.get(0);
        pmoreparamdefNode8 = (PMoreParamDef)nodeArrayList5.get(0);

        pparamdefNode1 = new AParamDef(null, tidNode3, listNode5, tasNode6, ppartypeNode7, pmoreparamdefNode8);
        }
	nodeList.add(pparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAparamdef8ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParamDef pparamdefNode1;
        {
            // Block
        TRef trefNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TAs tasNode6;
        PParType ppartypeNode7;
        PMoreParamDef pmoreparamdefNode8;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tasNode6 = (TAs)nodeArrayList4.get(0);
        ppartypeNode7 = (PParType)nodeArrayList5.get(0);
        pmoreparamdefNode8 = (PMoreParamDef)nodeArrayList6.get(0);

        pparamdefNode1 = new AParamDef(trefNode2, tidNode3, listNode5, tasNode6, ppartypeNode7, pmoreparamdefNode8);
        }
	nodeList.add(pparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AMoreParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoreParamDef pmoreparamdefNode1;
        {
            // Block
        TSeparator tseparatorNode2;
        PParamDef pparamdefNode3;
        tseparatorNode2 = (TSeparator)nodeArrayList1.get(0);
        pparamdefNode3 = (PParamDef)nodeArrayList2.get(0);

        pmoreparamdefNode1 = new AMoreParamDef(tseparatorNode2, pparamdefNode3);
        }
	nodeList.add(pmoreparamdefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AMultipleParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultipleParams pmultipleparamsNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pmultipleparamsNode1 = new AMultipleParams(tcommaNode2, tidNode3);
        }
	nodeList.add(pmultipleparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AApartype1ParType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParType ppartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        ppartypeNode1 = new AParType(pdatatypeNode2, null);
        }
	nodeList.add(ppartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AApartype2ParType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParType ppartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        TOcBrack tocbrackNode3;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        tocbrackNode3 = (TOcBrack)nodeArrayList2.get(0);

        ppartypeNode1 = new AParType(pdatatypeNode2, tocbrackNode3);
        }
	nodeList.add(ppartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AFuncLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDef pfuncdefNode2;
        pfuncdefNode2 = (PFuncDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncLocalDef(pfuncdefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AFuncDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AFuncDeclLocalDef(pfuncdeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AVarDeclLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDecl pvardeclNode2;
        pvardeclNode2 = (PVarDecl)nodeArrayList1.get(0);

        plocaldefNode1 = new AVarDeclLocalDef(pvardeclNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TOpenCbrack topencbrackNode2;
        LinkedList listNode3 = new LinkedList();
        TCloseCbrack tclosecbrackNode4;
        topencbrackNode2 = (TOpenCbrack)nodeArrayList1.get(0);
        {
            // Block
        }
        tclosecbrackNode4 = (TCloseCbrack)nodeArrayList2.get(0);

        pblockNode1 = new ABlock(topencbrackNode2, listNode3, tclosecbrackNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TOpenCbrack topencbrackNode2;
        LinkedList listNode4 = new LinkedList();
        TCloseCbrack tclosecbrackNode5;
        topencbrackNode2 = (TOpenCbrack)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tclosecbrackNode5 = (TCloseCbrack)nodeArrayList3.get(0);

        pblockNode1 = new ABlock(topencbrackNode2, listNode4, tclosecbrackNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AFuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSeparator tseparatorNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tseparatorNode3 = (TSeparator)nodeArrayList2.get(0);

        pfuncdeclNode1 = new AFuncDecl(pheaderNode2, tseparatorNode3);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAvardecl1VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TAs tasNode5;
        PDataType pdatatypeNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TSeparator tseparatorNode8;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        tasNode5 = (TAs)nodeArrayList3.get(0);
        pdatatypeNode6 = (PDataType)nodeArrayList4.get(0);
        tseparatorNode8 = (TSeparator)nodeArrayList5.get(0);

        pvardeclNode1 = new AVarDecl(tvarNode2, tidNode3, listNode4, tasNode5, pdatatypeNode6, null, tseparatorNode8);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAvardecl2VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TAs tasNode6;
        PDataType pdatatypeNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        TSeparator tseparatorNode9;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tasNode6 = (TAs)nodeArrayList4.get(0);
        pdatatypeNode7 = (PDataType)nodeArrayList5.get(0);
        tseparatorNode9 = (TSeparator)nodeArrayList6.get(0);

        pvardeclNode1 = new AVarDecl(tvarNode2, tidNode3, listNode5, tasNode6, pdatatypeNode7, null, tseparatorNode9);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAvardecl3VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        LinkedList listNode4 = new LinkedList();
        TAs tasNode5;
        PDataType pdatatypeNode6;
        PArrayInit parrayinitNode7;
        TSeparator tseparatorNode8;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        }
        tasNode5 = (TAs)nodeArrayList3.get(0);
        pdatatypeNode6 = (PDataType)nodeArrayList4.get(0);
        parrayinitNode7 = (PArrayInit)nodeArrayList5.get(0);
        tseparatorNode8 = (TSeparator)nodeArrayList6.get(0);

        pvardeclNode1 = new AVarDecl(tvarNode2, tidNode3, listNode4, tasNode5, pdatatypeNode6, parrayinitNode7, tseparatorNode8);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAvardecl4VarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDecl pvardeclNode1;
        {
            // Block
        TVar tvarNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        TAs tasNode6;
        PDataType pdatatypeNode7;
        PArrayInit parrayinitNode8;
        TSeparator tseparatorNode9;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tasNode6 = (TAs)nodeArrayList4.get(0);
        pdatatypeNode7 = (PDataType)nodeArrayList5.get(0);
        parrayinitNode8 = (PArrayInit)nodeArrayList6.get(0);
        tseparatorNode9 = (TSeparator)nodeArrayList7.get(0);

        pvardeclNode1 = new AVarDecl(tvarNode2, tidNode3, listNode5, tasNode6, pdatatypeNode7, parrayinitNode8, tseparatorNode9);
        }
	nodeList.add(pvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AArrayInit */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArrayInit parrayinitNode1;
        {
            // Block
        TOpenBrack topenbrackNode2;
        TNumber tnumberNode3;
        TCloseBrack tclosebrackNode4;
        topenbrackNode2 = (TOpenBrack)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);
        tclosebrackNode4 = (TCloseBrack)nodeArrayList3.get(0);

        parrayinitNode1 = new AArrayInit(topenbrackNode2, tnumberNode3, tclosebrackNode4);
        }
	nodeList.add(parrayinitNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AMoreIds */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMoreIds pmoreidsNode1;
        {
            // Block
        TComma tcommaNode2;
        TId tidNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pmoreidsNode1 = new AMoreIds(tcommaNode2, tidNode3);
        }
	nodeList.add(pmoreidsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ADataIntDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new ADataIntDataType(tintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce ADataCharDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ADataCharDataType(tcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        ptypeNode1 = new AType(pdatatypeNode2, null);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        TOcBrack tocbrackNode3;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        tocbrackNode3 = (TOcBrack)nodeArrayList2.get(0);

        ptypeNode1 = new AType(pdatatypeNode2, tocbrackNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ARetNothingRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ARetNothingRetType(tnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ARetDataTypeRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ARetDataTypeRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ASepStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSeparator tseparatorNode2;
        tseparatorNode2 = (TSeparator)nodeArrayList1.get(0);

        pstatementNode1 = new ASepStatement(tseparatorNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ALValAssStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLValAssign plvalassignNode2;
        plvalassignNode2 = (PLValAssign)nodeArrayList1.get(0);

        pstatementNode1 = new ALValAssStatement(plvalassignNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ABlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfSt pifstNode2;
        pifstNode2 = (PIfSt)nodeArrayList1.get(0);

        pstatementNode1 = new AIfStatement(pifstNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ARetStStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PRetSt pretstNode2;
        pretstNode2 = (PRetSt)nodeArrayList1.get(0);

        pstatementNode1 = new ARetStStatement(pretstNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AFuncCallStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFuncCallStatement(pfunccallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWhileSt pwhilestNode2;
        pwhilestNode2 = (PWhileSt)nodeArrayList1.get(0);

        pstatementNode1 = new AWhileStatement(pwhilestNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AWhileSt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWhileSt pwhilestNode1;
        {
            // Block
        TWhile twhileNode2;
        PCondition pconditionNode3;
        TDo tdoNode4;
        PStatement pstatementNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstatementNode5 = (PStatement)nodeArrayList4.get(0);

        pwhilestNode1 = new AWhileSt(twhileNode2, pconditionNode3, tdoNode4, pstatementNode5);
        }
	nodeList.add(pwhilestNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AWhileWElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWhileWElse pwhilewelseNode1;
        {
            // Block
        TWhile twhileNode2;
        PCondition pconditionNode3;
        TDo tdoNode4;
        PStWElse pstwelseNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstwelseNode5 = (PStWElse)nodeArrayList4.get(0);

        pwhilewelseNode1 = new AWhileWElse(twhileNode2, pconditionNode3, tdoNode4, pstwelseNode5);
        }
	nodeList.add(pwhilewelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AIfSt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfSt pifstNode1;
        {
            // Block
        PIfHeader pifheaderNode2;
        PIfTail piftailNode3;
        pifheaderNode2 = (PIfHeader)nodeArrayList1.get(0);
        piftailNode3 = (PIfTail)nodeArrayList2.get(0);

        pifstNode1 = new AIfSt(pifheaderNode2, piftailNode3);
        }
	nodeList.add(pifstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AIfHeader */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfHeader pifheaderNode1;
        {
            // Block
        TIf tifNode2;
        PCondition pconditionNode3;
        TThen tthenNode4;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);

        pifheaderNode1 = new AIfHeader(tifNode2, pconditionNode3, tthenNode4);
        }
	nodeList.add(pifheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ANoElseIfTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfTail piftailNode1;
        {
            // Block
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        piftailNode1 = new ANoElseIfTail(pstatementNode2);
        }
	nodeList.add(piftailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AElseIfTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfTail piftailNode1;
        {
            // Block
        PStWElse pstwelseNode2;
        TElse telseNode3;
        PStatement pstatementNode4;
        pstwelseNode2 = (PStWElse)nodeArrayList1.get(0);
        telseNode3 = (TElse)nodeArrayList2.get(0);
        pstatementNode4 = (PStatement)nodeArrayList3.get(0);

        piftailNode1 = new AElseIfTail(pstwelseNode2, telseNode3, pstatementNode4);
        }
	nodeList.add(piftailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ASepStWElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStWElse pstwelseNode1;
        {
            // Block
        TSeparator tseparatorNode2;
        tseparatorNode2 = (TSeparator)nodeArrayList1.get(0);

        pstwelseNode1 = new ASepStWElse(tseparatorNode2);
        }
	nodeList.add(pstwelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ALValAssStWElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStWElse pstwelseNode1;
        {
            // Block
        PLValAssign plvalassignNode2;
        plvalassignNode2 = (PLValAssign)nodeArrayList1.get(0);

        pstwelseNode1 = new ALValAssStWElse(plvalassignNode2);
        }
	nodeList.add(pstwelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ABlockStWElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStWElse pstwelseNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstwelseNode1 = new ABlockStWElse(pblockNode2);
        }
	nodeList.add(pstwelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ARetStStWElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStWElse pstwelseNode1;
        {
            // Block
        PRetSt pretstNode2;
        pretstNode2 = (PRetSt)nodeArrayList1.get(0);

        pstwelseNode1 = new ARetStStWElse(pretstNode2);
        }
	nodeList.add(pstwelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AFuncCallStWElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStWElse pstwelseNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pstwelseNode1 = new AFuncCallStWElse(pfunccallNode2);
        }
	nodeList.add(pstwelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AIfStWElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStWElse pstwelseNode1;
        {
            // Block
        PIfElse pifelseNode2;
        pifelseNode2 = (PIfElse)nodeArrayList1.get(0);

        pstwelseNode1 = new AIfStWElse(pifelseNode2);
        }
	nodeList.add(pstwelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AWhileStWElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStWElse pstwelseNode1;
        {
            // Block
        PWhileWElse pwhilewelseNode2;
        pwhilewelseNode2 = (PWhileWElse)nodeArrayList1.get(0);

        pstwelseNode1 = new AWhileStWElse(pwhilewelseNode2);
        }
	nodeList.add(pstwelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AIfElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfElse pifelseNode1;
        {
            // Block
        PIfHeader pifheaderNode2;
        PStWElse pstwelseNode3;
        TElse telseNode4;
        PStWElse pstwelseNode5;
        pifheaderNode2 = (PIfHeader)nodeArrayList1.get(0);
        pstwelseNode3 = (PStWElse)nodeArrayList2.get(0);
        telseNode4 = (TElse)nodeArrayList3.get(0);
        pstwelseNode5 = (PStWElse)nodeArrayList4.get(0);

        pifelseNode1 = new AIfElse(pifheaderNode2, pstwelseNode3, telseNode4, pstwelseNode5);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AAretst1RetSt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetSt pretstNode1;
        {
            // Block
        TReturn treturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSeparator tseparatorNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tseparatorNode4 = (TSeparator)nodeArrayList2.get(0);

        pretstNode1 = new ARetSt(treturnNode2, null, tseparatorNode4);
        }
	nodeList.add(pretstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AAretst2RetSt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetSt pretstNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpression pexpressionNode3;
        TSeparator tseparatorNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tseparatorNode4 = (TSeparator)nodeArrayList3.get(0);

        pretstNode1 = new ARetSt(treturnNode2, pexpressionNode3, tseparatorNode4);
        }
	nodeList.add(pretstNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TOpenPar topenparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TClosePar tcloseparNode5;
        TSeparator tseparatorNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        topenparNode3 = (TOpenPar)nodeArrayList2.get(0);
        tcloseparNode5 = (TClosePar)nodeArrayList3.get(0);
        tseparatorNode6 = (TSeparator)nodeArrayList4.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, topenparNode3, null, tcloseparNode5, tseparatorNode6);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TId tidNode2;
        TOpenPar topenparNode3;
        PFuncParams pfuncparamsNode4;
        TClosePar tcloseparNode5;
        TSeparator tseparatorNode6;
        tidNode2 = (TId)nodeArrayList1.get(0);
        topenparNode3 = (TOpenPar)nodeArrayList2.get(0);
        pfuncparamsNode4 = (PFuncParams)nodeArrayList3.get(0);
        tcloseparNode5 = (TClosePar)nodeArrayList4.get(0);
        tseparatorNode6 = (TSeparator)nodeArrayList5.get(0);

        pfunccallNode1 = new AFuncCall(tidNode2, topenparNode3, pfuncparamsNode4, tcloseparNode5, tseparatorNode6);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAfuncparams1FuncParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncParams pfuncparamsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode3 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        pfuncparamsNode1 = new AFuncParams(pexpressionNode2, listNode3);
        }
	nodeList.add(pfuncparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAfuncparams2FuncParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncParams pfuncparamsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode4 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfuncparamsNode1 = new AFuncParams(pexpressionNode2, listNode4);
        }
	nodeList.add(pfuncparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AMultFuncParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultFuncParams pmultfuncparamsNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpression pexpressionNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pmultfuncparamsNode1 = new AMultFuncParams(tcommaNode2, pexpressionNode3);
        }
	nodeList.add(pmultfuncparamsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce ALValWOffs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValWOffs plvalwoffsNode1;
        {
            // Block
        TId tidNode2;
        POffs poffsNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        poffsNode3 = (POffs)nodeArrayList2.get(0);

        plvalwoffsNode1 = new ALValWOffs(tidNode2, poffsNode3);
        }
	nodeList.add(plvalwoffsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ALValIdLVal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLVal plvalNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plvalNode1 = new ALValIdLVal(tidNode2);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ALValStrLVal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLVal plvalNode1;
        {
            // Block
        TStringConst tstringconstNode2;
        tstringconstNode2 = (TStringConst)nodeArrayList1.get(0);

        plvalNode1 = new ALValStrLVal(tstringconstNode2);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ALValOffsLVal */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLVal plvalNode1;
        {
            // Block
        PLVal plvalNode2;
        TOpenBrack topenbrackNode3;
        PExpression pexpressionNode4;
        TCloseBrack tclosebrackNode5;
        plvalNode2 = (PLVal)nodeArrayList1.get(0);
        topenbrackNode3 = (TOpenBrack)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tclosebrackNode5 = (TCloseBrack)nodeArrayList4.get(0);

        plvalNode1 = new ALValOffsLVal(plvalNode2, topenbrackNode3, pexpressionNode4, tclosebrackNode5);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AOffs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POffs poffsNode1;
        {
            // Block
        TOpenBrack topenbrackNode2;
        PExpression pexpressionNode3;
        TCloseBrack tclosebrackNode4;
        topenbrackNode2 = (TOpenBrack)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tclosebrackNode4 = (TCloseBrack)nodeArrayList3.get(0);

        poffsNode1 = new AOffs(topenbrackNode2, pexpressionNode3, tclosebrackNode4);
        }
	nodeList.add(poffsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ALValSimpleLValAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValAssign plvalassignNode1;
        {
            // Block
        PLVal plvalNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        TSeparator tseparatorNode5;
        plvalNode2 = (PLVal)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tseparatorNode5 = (TSeparator)nodeArrayList4.get(0);

        plvalassignNode1 = new ALValSimpleLValAssign(plvalNode2, tassignNode3, pexpressionNode4, tseparatorNode5);
        }
	nodeList.add(plvalassignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AFuncCallExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFuncCallExpression(pfunccallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce ANumericExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PNumericExpr pnumericexprNode2;
        pnumericexprNode2 = (PNumericExpr)nodeArrayList1.get(0);

        pexpressionNode1 = new ANumericExpression(pnumericexprNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce APlusNumericExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumericExpr pnumericexprNode1;
        {
            // Block
        PNumericExpr pnumericexprNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pnumericexprNode2 = (PNumericExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pnumericexprNode1 = new APlusNumericExpr(pnumericexprNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pnumericexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AMinusNumericExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumericExpr pnumericexprNode1;
        {
            // Block
        PNumericExpr pnumericexprNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pnumericexprNode2 = (PNumericExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pnumericexprNode1 = new AMinusNumericExpr(pnumericexprNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pnumericexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ATermNumericExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumericExpr pnumericexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pnumericexprNode1 = new ATermNumericExpr(ptermNode2);
        }
	nodeList.add(pnumericexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ATimesTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TTimes ttimesNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        ttimesNode3 = (TTimes)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ATimesTerm(ptermNode2, ttimesNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TDiv tdivNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tdivNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMod tmodNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AModTerm(ptermNode2, tmodNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AParExprFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TOpenPar topenparNode2;
        PNumericExpr pnumericexprNode3;
        TClosePar tcloseparNode4;
        topenparNode2 = (TOpenPar)nodeArrayList1.get(0);
        pnumericexprNode3 = (PNumericExpr)nodeArrayList2.get(0);
        tcloseparNode4 = (TClosePar)nodeArrayList3.get(0);

        pfactorNode1 = new AParExprFactor(topenparNode2, pnumericexprNode3, tcloseparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce ALValueFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PLVal plvalNode2;
        plvalNode2 = (PLVal)nodeArrayList1.get(0);

        pfactorNode1 = new ALValueFactor(plvalNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce ACharConstFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pfactorNode1 = new ACharConstFactor(tcharconstNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce ANumberFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pfactorNode1 = new ANumberFactor(tnumberNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ACondCondition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCondition pconditionNode2;
        TOr torNode3;
        PAndCond pandcondNode4;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pandcondNode4 = (PAndCond)nodeArrayList3.get(0);

        pconditionNode1 = new ACondCondition(pconditionNode2, torNode3, pandcondNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AAndCondCondition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PAndCond pandcondNode2;
        pandcondNode2 = (PAndCond)nodeArrayList1.get(0);

        pconditionNode1 = new AAndCondCondition(pandcondNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AAndCondAndCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndCond pandcondNode1;
        {
            // Block
        PAndCond pandcondNode2;
        TAnd tandNode3;
        PNotCond pnotcondNode4;
        pandcondNode2 = (PAndCond)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pnotcondNode4 = (PNotCond)nodeArrayList3.get(0);

        pandcondNode1 = new AAndCondAndCond(pandcondNode2, tandNode3, pnotcondNode4);
        }
	nodeList.add(pandcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ANotCondAndCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAndCond pandcondNode1;
        {
            // Block
        PNotCond pnotcondNode2;
        pnotcondNode2 = (PNotCond)nodeArrayList1.get(0);

        pandcondNode1 = new ANotCondAndCond(pnotcondNode2);
        }
	nodeList.add(pandcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce ANotCondNotCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNotCond pnotcondNode1;
        {
            // Block
        TNot tnotNode2;
        POperatorCond poperatorcondNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        poperatorcondNode3 = (POperatorCond)nodeArrayList2.get(0);

        pnotcondNode1 = new ANotCondNotCond(tnotNode2, poperatorcondNode3);
        }
	nodeList.add(pnotcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AOperatorCondNotCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNotCond pnotcondNode1;
        {
            // Block
        POperatorCond poperatorcondNode2;
        poperatorcondNode2 = (POperatorCond)nodeArrayList1.get(0);

        pnotcondNode1 = new AOperatorCondNotCond(poperatorcondNode2);
        }
	nodeList.add(pnotcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AOperatorCondOperatorCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorCond poperatorcondNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TCompOperator tcompoperatorNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tcompoperatorNode3 = (TCompOperator)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        poperatorcondNode1 = new AOperatorCondOperatorCond(pexpressionNode2, tcompoperatorNode3, pexpressionNode4);
        }
	nodeList.add(poperatorcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AParCondOperatorCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperatorCond poperatorcondNode1;
        {
            // Block
        PParCond pparcondNode2;
        pparcondNode2 = (PParCond)nodeArrayList1.get(0);

        poperatorcondNode1 = new AParCondOperatorCond(pparcondNode2);
        }
	nodeList.add(poperatorcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce AParCondParCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParCond pparcondNode1;
        {
            // Block
        TOpenPar topenparNode2;
        PCondition pconditionNode3;
        TClosePar tcloseparNode4;
        topenparNode2 = (TOpenPar)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        tcloseparNode4 = (TClosePar)nodeArrayList3.get(0);

        pparcondNode1 = new AParCondParCond(topenparNode2, pconditionNode3, tcloseparNode4);
        }
	nodeList.add(pparcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ATerminal$ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParamDef pparamdefNode1;
        pparamdefNode1 = (PParamDef)nodeArrayList1.get(0);
	if(pparamdefNode1 != null)
	{
	  listNode2.add(pparamdefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ANonTerminal$ParamDef */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParamDef pparamdefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamdefNode2 = (PParamDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamdefNode2 != null)
	{
	  listNode3.add(pparamdefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ATerminal$MultipleParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMultipleParams pmultipleparamsNode1;
        pmultipleparamsNode1 = (PMultipleParams)nodeArrayList1.get(0);
	if(pmultipleparamsNode1 != null)
	{
	  listNode2.add(pmultipleparamsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ANonTerminal$MultipleParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMultipleParams pmultipleparamsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultipleparamsNode2 = (PMultipleParams)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultipleparamsNode2 != null)
	{
	  listNode3.add(pmultipleparamsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ATerminal$MoreIds */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMoreIds pmoreidsNode1;
        pmoreidsNode1 = (PMoreIds)nodeArrayList1.get(0);
	if(pmoreidsNode1 != null)
	{
	  listNode2.add(pmoreidsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ANonTerminal$MoreIds */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMoreIds pmoreidsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoreidsNode2 = (PMoreIds)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoreidsNode2 != null)
	{
	  listNode3.add(pmoreidsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ATerminal$MultFuncParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMultFuncParams pmultfuncparamsNode1;
        pmultfuncparamsNode1 = (PMultFuncParams)nodeArrayList1.get(0);
	if(pmultfuncparamsNode1 != null)
	{
	  listNode2.add(pmultfuncparamsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce ANonTerminal$MultFuncParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMultFuncParams pmultfuncparamsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmultfuncparamsNode2 = (PMultFuncParams)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmultfuncparamsNode2 != null)
	{
	  listNode3.add(pmultfuncparamsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {26, SHIFT, 1}, },
			{{-1, ERROR, 1}, {43, SHIFT, 5}, },
			{{-1, ERROR, 2}, {47, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {24, SHIFT, 6}, {26, SHIFT, 1}, {32, SHIFT, 7}, },
			{{-1, ERROR, 5}, {30, SHIFT, 15}, },
			{{-1, ERROR, 6}, {43, SHIFT, 16}, },
			{{-1, ERROR, 7}, {8, SHIFT, 17}, {14, SHIFT, 18}, {29, SHIFT, 19}, {32, SHIFT, 7}, {33, SHIFT, 20}, {38, SHIFT, 21}, {43, SHIFT, 22}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 9}, {24, SHIFT, 6}, {26, SHIFT, 1}, {32, SHIFT, 7}, {38, SHIFT, 34}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 14}, {24, SHIFT, 6}, {26, SHIFT, 1}, {32, SHIFT, 7}, },
			{{-1, ERROR, 15}, {28, SHIFT, 37}, {31, SHIFT, 38}, {43, SHIFT, 39}, },
			{{-1, ERROR, 16}, {25, SHIFT, 42}, {36, SHIFT, 43}, },
			{{-1, ERROR, 17}, {11, SHIFT, 46}, {30, SHIFT, 47}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 18}, {11, SHIFT, 46}, {30, SHIFT, 47}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 19}, {30, SHIFT, 62}, {38, SHIFT, 63}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 64}, {30, SHIFT, 65}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 28}, {8, SHIFT, 17}, {14, SHIFT, 66}, {29, SHIFT, 19}, {32, SHIFT, 7}, {38, SHIFT, 67}, {43, SHIFT, 22}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 31}, {5, SHIFT, 78}, {34, SHIFT, 79}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 33}, {8, SHIFT, 17}, {14, SHIFT, 18}, {29, SHIFT, 19}, {32, SHIFT, 7}, {33, SHIFT, 80}, {38, SHIFT, 21}, {43, SHIFT, 22}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 37}, {43, SHIFT, 82}, },
			{{-1, ERROR, 38}, {25, SHIFT, 83}, },
			{{-1, ERROR, 39}, {25, SHIFT, 84}, {36, SHIFT, 85}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 41}, {28, SHIFT, 37}, {31, SHIFT, 88}, {43, SHIFT, 39}, },
			{{-1, ERROR, 42}, {6, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, ERROR, 43}, {43, SHIFT, 93}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 45}, {25, SHIFT, 94}, {36, SHIFT, 43}, },
			{{-1, ERROR, 46}, {30, SHIFT, 47}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 47}, {11, SHIFT, 46}, {30, SHIFT, 47}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 79}, {34, SHIFT, 79}, },
			{{-1, ERROR, 52}, {42, SHIFT, 99}, },
			{{-1, REDUCE, 70}, {0, SHIFT, 100}, {1, SHIFT, 101}, },
			{{-1, REDUCE, 73}, {2, SHIFT, 102}, {3, SHIFT, 103}, {4, SHIFT, 104}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 56}, {9, SHIFT, 105}, {13, SHIFT, 106}, },
			{{-1, REDUCE, 83}, {12, SHIFT, 107}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 61}, {13, SHIFT, 106}, {15, SHIFT, 108}, },
			{{-1, ERROR, 62}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 109}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 64}, {38, SHIFT, 111}, },
			{{-1, ERROR, 65}, {30, SHIFT, 62}, {31, SHIFT, 112}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 66}, {11, SHIFT, 46}, {30, SHIFT, 47}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 35}, {10, REDUCE, 48}, },
			{{-1, REDUCE, 37}, {10, REDUCE, 50}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 71}, {8, SHIFT, 17}, {14, SHIFT, 66}, {29, SHIFT, 19}, {32, SHIFT, 7}, {38, SHIFT, 67}, {43, SHIFT, 22}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 73}, {10, SHIFT, 117}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 39}, {10, REDUCE, 51}, },
			{{-1, REDUCE, 40}, {10, REDUCE, 52}, },
			{{-1, REDUCE, 36}, {10, REDUCE, 49}, },
			{{-1, ERROR, 78}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 79}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 82}, {25, SHIFT, 120}, {36, SHIFT, 85}, },
			{{-1, ERROR, 83}, {6, SHIFT, 90}, {7, SHIFT, 91}, {27, SHIFT, 122}, },
			{{-1, ERROR, 84}, {6, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, ERROR, 85}, {43, SHIFT, 127}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 87}, {25, SHIFT, 128}, {36, SHIFT, 85}, },
			{{-1, ERROR, 88}, {25, SHIFT, 130}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 92}, {34, SHIFT, 131}, {38, SHIFT, 132}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 94}, {6, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 70}, {0, SHIFT, 100}, {1, SHIFT, 101}, {31, SHIFT, 135}, },
			{{-1, ERROR, 98}, {13, SHIFT, 106}, {31, SHIFT, 136}, },
			{{-1, ERROR, 99}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 100}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 109}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 101}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 109}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 102}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 109}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 103}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 109}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 104}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 109}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 106}, {11, SHIFT, 46}, {30, SHIFT, 47}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 107}, {11, SHIFT, 46}, {30, SHIFT, 47}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, ERROR, 108}, {8, SHIFT, 17}, {14, SHIFT, 18}, {29, SHIFT, 19}, {32, SHIFT, 7}, {38, SHIFT, 21}, {43, SHIFT, 22}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 110}, {0, SHIFT, 100}, {1, SHIFT, 101}, {31, SHIFT, 135}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 112}, {38, SHIFT, 146}, },
			{{-1, ERROR, 113}, {31, SHIFT, 147}, },
			{{-1, REDUCE, 60}, {36, SHIFT, 148}, },
			{{-1, ERROR, 115}, {13, SHIFT, 106}, {15, SHIFT, 151}, },
			{{-1, ERROR, 116}, {10, SHIFT, 152}, },
			{{-1, ERROR, 117}, {8, SHIFT, 17}, {14, SHIFT, 18}, {29, SHIFT, 19}, {32, SHIFT, 7}, {38, SHIFT, 21}, {43, SHIFT, 22}, {45, SHIFT, 23}, },
			{{-1, ERROR, 118}, {38, SHIFT, 154}, },
			{{-1, ERROR, 119}, {35, SHIFT, 155}, },
			{{-1, ERROR, 120}, {6, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, ERROR, 121}, {25, SHIFT, 157}, {36, SHIFT, 85}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, {38, SHIFT, 158}, },
			{{-1, REDUCE, 15}, {37, SHIFT, 160}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 128}, {6, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, REDUCE, 96}, },
			{{-1, ERROR, 130}, {6, SHIFT, 90}, {7, SHIFT, 91}, {27, SHIFT, 122}, },
			{{-1, ERROR, 131}, {39, SHIFT, 163}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 133}, {38, SHIFT, 164}, },
			{{-1, ERROR, 134}, {34, SHIFT, 131}, {38, SHIFT, 165}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 71}, {2, SHIFT, 102}, {3, SHIFT, 103}, {4, SHIFT, 104}, },
			{{-1, REDUCE, 72}, {2, SHIFT, 102}, {3, SHIFT, 103}, {4, SHIFT, 104}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 82}, {12, SHIFT, 107}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 147}, {38, SHIFT, 167}, },
			{{-1, ERROR, 148}, {30, SHIFT, 62}, {39, SHIFT, 48}, {43, SHIFT, 22}, {44, SHIFT, 49}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 61}, {36, SHIFT, 148}, },
			{{-1, ERROR, 151}, {8, SHIFT, 17}, {14, SHIFT, 66}, {29, SHIFT, 19}, {32, SHIFT, 7}, {38, SHIFT, 67}, {43, SHIFT, 22}, {45, SHIFT, 23}, },
			{{-1, ERROR, 152}, {8, SHIFT, 17}, {14, SHIFT, 66}, {29, SHIFT, 19}, {32, SHIFT, 7}, {38, SHIFT, 67}, {43, SHIFT, 22}, {45, SHIFT, 23}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 6}, {38, SHIFT, 158}, },
			{{-1, ERROR, 157}, {6, SHIFT, 90}, {7, SHIFT, 91}, },
			{{-1, ERROR, 158}, {28, SHIFT, 37}, {43, SHIFT, 39}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 7}, {38, SHIFT, 158}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 163}, {35, SHIFT, 176}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 166}, {38, SHIFT, 177}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 8}, {38, SHIFT, 158}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 12}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, {0, 4}, },
			{{-1, 40}, {41, 89}, {158, 174}, },
			{{-1, 159}, {156, 172}, {161, 175}, {173, 178}, },
			{{-1, 86}, {87, 129}, {121, 129}, },
			{{-1, 125}, {120, 156}, {128, 161}, {157, 173}, },
			{{-1, 10}, {14, 35}, },
			{{-1, 24}, {4, 11}, {9, 11}, {14, 36}, {28, 68}, {71, 68}, {151, 68}, {152, 68}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 133}, {134, 166}, },
			{{-1, 44}, {45, 95}, },
			{{-1, 126}, {42, 92}, {83, 123}, {94, 134}, {130, 123}, },
			{{-1, -1}, },
			{{-1, 124}, {130, 162}, },
			{{-1, 69}, {7, 25}, {33, 81}, {108, 145}, {117, 153}, {151, 145}, {152, 153}, },
			{{-1, 26}, },
			{{-1, 70}, },
			{{-1, 27}, },
			{{-1, 28}, {28, 71}, {71, 71}, {151, 71}, {152, 71}, },
			{{-1, 72}, },
			{{-1, 73}, {71, 116}, {151, 170}, {152, 171}, },
			{{-1, 74}, },
			{{-1, 29}, {28, 75}, {71, 75}, {151, 75}, {152, 75}, },
			{{-1, 50}, {7, 30}, {28, 76}, {33, 30}, {71, 76}, {108, 30}, {117, 30}, {151, 76}, {152, 76}, },
			{{-1, 113}, },
			{{-1, 149}, {150, 169}, },
			{{-1, -1}, },
			{{-1, 51}, {7, 31}, {28, 31}, {33, 31}, {71, 31}, {108, 31}, {117, 31}, {151, 31}, {152, 31}, },
			{{-1, -1}, },
			{{-1, 32}, {28, 77}, {71, 77}, {151, 77}, {152, 77}, },
			{{-1, 52}, {19, 64}, {65, 114}, {78, 118}, {79, 119}, {99, 137}, {148, 168}, },
			{{-1, 53}, {47, 97}, {62, 110}, },
			{{-1, 54}, {100, 138}, {101, 139}, },
			{{-1, 55}, {102, 140}, {103, 141}, {104, 142}, },
			{{-1, 56}, {18, 61}, {47, 98}, {66, 115}, },
			{{-1, 57}, {106, 143}, },
			{{-1, 58}, {107, 144}, },
			{{-1, 59}, {46, 96}, },
			{{-1, 60}, },
			{{-1, 14}, },
			{{-1, 41}, },
			{{-1, 87}, {82, 121}, },
			{{-1, 33}, },
			{{-1, 45}, },
			{{-1, 150}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'var', 'fun', '{'",
			"expecting: '('",
			"expecting: 'if', 'while', 'return', '{', '}', ';', id, string const",
			"expecting: 'var', 'fun', '{', ';'",
			"expecting: 'var', 'fun', '{', EOF",
			"expecting: 'ref', ')', id",
			"expecting: ':', ','",
			"expecting: 'not', '(', number, id, char const, string const",
			"expecting: '(', ';', number, id, char const, string const",
			"expecting: 'if', 'else', 'while', 'var', 'fun', 'return', '{', '}', ';', id, string const, EOF",
			"expecting: '+', '-', '*', 'div', 'mod', '<-', 'then', 'and', 'or', 'do', '(', ')', '[', ']', ',', ';', comp operator",
			"expecting: '+', '-', '*', 'div', 'mod', '<-', 'then', 'and', 'or', 'do', ')', '[', ']', ',', ';', comp operator",
			"expecting: 'if', 'while', 'return', '{', ';', id, string const",
			"expecting: '<-', '['",
			"expecting: ':'",
			"expecting: 'char', 'int'",
			"expecting: '(', number, id, char const, string const",
			"expecting: '+', '-', '*', 'div', 'mod', 'then', 'and', 'or', 'do', ')', ']', ',', ';', comp operator",
			"expecting: 'then', 'and', 'or', 'do', ')', ']', ',', ';', comp operator",
			"expecting: '+', '-', '*', 'div', 'mod', 'then', 'and', 'or', 'do', ')', '[', ']', ',', ';', comp operator",
			"expecting: comp operator",
			"expecting: '+', '-', 'then', 'and', 'or', 'do', ')', ']', ',', ';', comp operator",
			"expecting: 'then', 'or'",
			"expecting: 'then', 'and', 'or', 'do', ')'",
			"expecting: 'or', 'do'",
			"expecting: 'if', 'else', 'while', 'return', '{', '}', ';', id, string const",
			"expecting: ';'",
			"expecting: '(', ')', number, id, char const, string const",
			"expecting: 'else'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'var', 'fun', 'ref', ')', '{', '[', oc brack, ';', id",
			"expecting: '[', ';'",
			"expecting: '+', '-', ')', comp operator",
			"expecting: 'or', ')'",
			"expecting: '+', '-', ')'",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: 'ref', ')', ';', id",
			"expecting: 'ref', ')', oc brack, ';', id",
			"expecting: number",
			"expecting: 'if', 'then', 'else', 'and', 'or', 'while', 'do', 'return', ')', '{', '}', ']', ',', ';', comp operator, id, string const",
			"expecting: 'ref', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 3, 7, 3, 3, 3, 8, 9, 10, 10, 11, 12, 5, 13, 14, 5, 5, 5, 5, 15, 5, 5, 16, 5, 5, 3, 3, 7, 1, 17, 9, 8, 8, 18, 1, 9, 9, 19, 10, 20, 20, 21, 22, 23, 24, 20, 20, 25, 26, 26, 26, 26, 27, 19, 28, 29, 30, 10, 28, 28, 5, 31, 15, 5, 31, 31, 28, 28, 28, 19, 19, 12, 5, 9, 32, 18, 1, 9, 9, 17, 8, 33, 33, 34, 9, 18, 9, 26, 35, 36, 19, 19, 19, 19, 19, 19, 15, 10, 10, 15, 22, 37, 28, 29, 38, 39, 27, 31, 15, 29, 40, 18, 9, 6, 6, 6, 41, 42, 9, 18, 9, 32, 43, 3, 29, 34, 20, 26, 26, 20, 20, 20, 20, 20, 26, 26, 5, 44, 29, 19, 39, 39, 15, 15, 5, 28, 14, 41, 18, 45, 8, 41, 41, 6, 40, 3, 3, 29, 44, 39, 39, 31, 31, 8, 41, 8, 8, 29, 3, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
