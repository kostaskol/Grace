Package graceLang;

Helpers
  lower                 = ['a' .. 'z'];
  upper                 = ['A' .. 'Z'];
  digit                 = ['0' .. '9'];
  all					= [0x0 .. 0xffff];
  ascii_all             = [32 .. 127];

  hex_num               = ['a' .. 'f'] | ['A' .. 'F'];

  cr                    = 13;
  lf                    = 10;
  tab                   = 9;
  eol                   = cr lf | cr | lf;
  not_cr_lf             = [all - [cr + lf]];
  not_quote             = [all - '''];

  letter                = upper | lower;
  number                = digit+;

  id                    = letter (letter | '_' | number)*;

  let                   = all;
  hex_digit             = digit | hex_num;
  hex                   = ('0' ('x' | 'X')) hex_digit+;

  ws                    = (' ' | tab | eol)+;
  mul_com        	    = '$$' [all - ['$' + '$']]* '$$';
  // We use eol* for a line comment ending because
  // otherwise it would not work if there was a comment at the end of the file
  line_com              = '$' not_cr_lf* eol*;


  plus				    = '+';
  minus				    = '-';
  times				    = '*';
  div				    = 'div';
  mod				    = 'mod';

  gt	                = '>';
  ge	                = '>=';
  equal	                = '=';
  lt	                = '<';
  le	                = '<=';
  dif	                = '#';


  // Escape Sequences
  nl_e        		    = '\n';
  tab_e                 = '\t';
  cr_e                  = '\r';
  null_term_e           = '\0';
  backslash_e           = '\\';
  apostrophe_e          = ''';
  quotes_e              = '\"';
  hexa_e                = '\x' hex_digit+
                            | '\X' hex_digit+
                            ;

  quote                 = '"';

  int                   = 'int';
  char                  = 'char';

esc                     = nl_e
                            | tab_e
                            | cr_e
                            | null_term_e
                            | backslash_e
                            | apostrophe_e
                            | quotes_e
                            | hexa_e
                            ;

// ______________________________________________________________________________________________________________
Tokens
  // Operators
  plus					= '+';
  minus					= '-';
  times					= '*';
  div				    = 'div';
  mod					= 'mod';

  assign				= '<-';



  // Data types
  d_type                = int | char;

  // Conditionals
  if					= 'if';
  then				    = 'then';
  else				    = 'else';

  // Conditions (boolean expressions)
  not					= 'not';
  and       	        = 'and';
  or        	        = 'or';


    // Loops
  while				    = 'while';
  do					= 'do';

  // Variable declaration
  var 			        = 'var';
  as 				    = ':';  // Shows the variable's type (int/int[], char/char[])

  // Function
  fun     	            = 'fun';
  nothing			    = 'nothing';    // void return
  ref				    = 'ref';        // pass by reference
  return			    = 'return';

  // Special symbols
  open_par		        = '(';
  close_par		        = ')';
  open_cbrack		    = '{';
  close_cbrack	        = '}';
  open_brack	        = '[';
  close_brack 	        = ']';
  comma                 = ',';
  oc_brack              = '[' ']';

  erroneous_tok         = (digit)+ (lower | upper);
  // Separator
  separator             = ';';


  number                = digit+;

  // Ignored tokens
  blank	                = (' ' | 13 | 10 | tab);
  mult_comment          = mul_com;
  comment               = line_com;

  operation             = plus | minus | times | div | mod;

  comp_operator         = equal | ge | gt | le | lt | dif;

// Identifier
  id                    = id;
  char_const            = ''' ([all - '''] | esc) ''';

  string_const          = '"' ([all - [['"' + '''] +
                                ['\' + [13 + [10 + 9]]]]] | esc)* '"';

// ______________________________________________________________________________________________________________
Ignored Tokens
  blank,
  comment,
  mult_comment;


// ______________________________________________________________________________________________________________
Productions
  // General program production
  program               = func_def{-> New program(func_def.func_def)};

  // Function definition
  func_def{->func_def}  = header local_def* block {-> New func_def(header.id,
                                                [header.p_dec],
                                                header.ret_type,
                                                [local_def.local_def],
                                                [block.statement])};

  // Function definition : 'fun' id '(' <parameters...> ')' ':' <return type>
  header{->id p_dec* ret_type}
                        = fun [func_name]:id open_par
                            [params]:param_def* close_par as [ret_type]:ret_type
                            {-> func_name [params.p_dec] ret_type};

  // Function parameter definitions
  param_def{->p_dec*}
                        = param_bundle [more_params]:more_param_def?
                            {-> [param_bundle.p_dec, more_params.p_dec]}
                            ;

  param_bundle{->p_dec*}
                        = ref? id oc_brack? array_offs* multiple_ids* as par_type
                            {-> [New p_dec(ref, [id, multiple_ids.id], par_type.par_type)]}
                            ;

  multiple_ids{->id}
                        = comma id {-> id};

  array_offs{-> number} = open_brack number close_brack {-> number};

  more_param_def{->p_dec*}
                        = separator [param_def]:param_def {-> [param_def.p_dec]};

  par_type{->par_type}  = d_type [array]:oc_brack? array_offs*
                                {-> New par_type(d_type, array, [array_offs.number])}
                                ;

  local_def{->local_def}
                        = {func} func_def 
                                        {-> New local_def.func_def(func_def.func_def)}
                              | {func_decl} func_decl 
                                        {-> New local_def.func_dec(func_decl.id,
                                                                   [func_decl.p_dec],
                                                                   func_decl.ret_type)}
                              | {var_decl} var_decl 
                                        {-> New local_def.var_dec([var_decl.id], var_decl.d_type, [var_decl.expr])}
                              ;

  // Block
  block{->statement*}   = open_cbrack statement* close_cbrack {-> [statement]};

  // Function declaration
  func_decl{->id p_dec* ret_type}
                        = header separator {-> header.id
                                               [header.p_dec]
                                               header.ret_type};

  // Variable declarations
  var_decl{->id* d_type expr*}
                        = var [var_name]:id multiple_ids* as d_type array_init* separator
                            {-> [var_name, multiple_ids.id] d_type [array_init.expr]}
                            ;

  array_init{->expr}   = open_brack expression close_brack
                                    {-> expression.expr}
                            ;

  ret_type{->ret_type}  = {ret_nothing} nothing {-> New ret_type.nothing(nothing)}
                            | {ret_data_type} d_type {-> New ret_type.type(d_type)}
                            ;

  // Statement
  statement{->statement}
                        = {sep} separator
                                    {-> New statement.sep()}
                            | {l_val_ass} [l_val]:l_val_assign
                                    {-> New statement.l_val_ass(l_val.l_val, l_val.expr)}
                            | {block} block
                                    {-> New statement.block([block.statement])}
                            | {if} if_st
                                    {-> if_st.statement}
                            | {ret_st} ret_st
                                    {-> New statement.ret_st(ret_st.return, ret_st.expr)}
                            | {func_call} func_call separator
                                    {-> New statement.func_call(func_call.id, [func_call.expr])}
                            | {while} while_st
                                    {-> while_st.statement}
                            ;
  // While statement
  while_st{->statement}= while condition do statement
                            {-> New statement.while_st(condition.cond, statement.statement)}
                            ;

  while_w_else{->statement}
                        = while condition do st_w_else
                            {-> New statement.while_st(condition.cond, st_w_else.statement)}
                            ;

  // If statement
  if_st{->statement}    = {no_else} if condition then statement
                                    {-> New statement.if_no_else(condition.cond, statement.statement)}
                            | {else} if condition then st_w_else else statement
                                    {-> New statement.if_else(condition.cond, st_w_else.statement, statement.statement)}
                            ;

  st_w_else{->statement}
                        = {sep} separator
                                    {-> New statement.sep()}
                            | {l_val_ass} [l_val]:l_val_assign
                                    {-> New statement.l_val_ass(l_val.l_val, l_val.expr)}
                            | {block} block
                                    {-> New statement.block([block.statement])}
                            | {ret_st} ret_st
                                    {-> New statement.ret_st(ret_st.return, ret_st.expr)}
                            | {func_call} func_call separator
                                    {-> New statement.func_call(func_call.id, [func_call.expr])}
                            | {if} if_else
                                    {-> if_else.statement}
                            | {while} while_w_else
                                    {-> while_w_else.statement}
                            ;

  if_else{->statement}
                        = {st_w_else} if condition then [inner]:st_w_else else [outer]:st_w_else
                                    {-> New statement.if_else(condition.cond,
                                                inner.statement, outer.statement)}
                                    ;

  // Return statement
  ret_st{->return expr?}
                        = return expression? separator {-> return expression.expr};

  // Function call
  func_call{->id expr*}
                        = id open_par func_params? close_par
                            {-> id [func_params.expr]}
                            ;

  func_params{->expr*}
                        = expression mult_func_params*
                            {-> [expression.expr, mult_func_params.expr]}
                            ;

  mult_func_params{->expr}
                        = comma expression {-> expression.expr};

  // Left value
  l_val {->l_val}        = {l_val_id} id array_init*
                                    {-> New l_val.id(id, [array_init.expr])}
                            | {l_val_str} string_const array_init?
                                    {-> New l_val.str_c(string_const)}
                            ;

  l_val_assign{->l_val expr}
                        = [left_value]:l_val assign expression separator
                            {-> left_value.l_val expression.expr}
                            ;

  // Expression
  expression{->expr}    = {numeric} numeric_expr {-> numeric_expr.expr};

  // An expression is either
  numeric_expr{->expr} = {add} [left]:numeric_expr plus [right]:term {-> New expr.add(left.expr, right.expr)}
                            | {sub} [left]:numeric_expr minus [right]:term {-> New expr.sub(left.expr, right.expr)}
                            | {term} term {-> term.expr}
                            ;

  term{->expr}         = {times} [left]:term times [right]:factor {-> New expr.mult(left.expr, right.expr)}
                            | {div} [left]:term div [right]:factor {-> New expr.div(left.expr, right.expr)}
                            | {mod} [left]:term mod [right]:factor {-> New expr.mod(left.expr, right.expr)}
                            | {factor} factor {-> factor.expr}
                            ;

  factor{->expr}      =  {par_expr} signed_expr
                                    {-> signed_expr.expr}
                            | {l_value} l_val
                                    {-> New expr.l_val(l_val.l_val)}
                            | {char_const} char_const
                                    {-> New expr.char_c(char_const)}
                            | {signed} signed_number
                                    {-> signed_number.expr}
                            | {func_call} func_call
                                    {-> New expr.func_call(func_call.id, [func_call.expr])}
                            ;

  signed_number{->expr}
                      = {pos_num} plus signed_number
                                    {-> New expr.signed_expr(New sign.plus(plus), signed_number.expr)}
                            | {neg_num} minus signed_number
                                    {-> New expr.signed_expr(New sign.minus(minus), signed_number.expr)}
                            | {pos_id} plus id
                                    {-> New expr.signed_id(New sign.plus(plus), id)}
                            | {neg_id} minus id
                                    {-> New expr.signed_id(New sign.minus(minus), id)}
                            | {u_num} number
                                    {-> New expr.number(number)}
                            ;

  signed_expr{->expr} = {plus_expr} plus open_par numeric_expr close_par
                                    {-> New expr.signed_expr(New sign.plus(plus), numeric_expr.expr)}
                            | {neg_expr} minus open_par numeric_expr close_par
                                    {-> New expr.signed_expr(New sign.minus(minus), numeric_expr.expr)}
                            | {u_expr} open_par numeric_expr close_par
                                    {-> New expr.par_expr(numeric_expr.expr)}
                            ;


// Conditionals
  condition{->cond}  = {or_cond} [left]:condition or [right]:and_cond {-> New cond.or(left.cond, or, right.cond)}
                            | {and_cond} and_cond {-> and_cond.cond}
                            ;

  and_cond{->cond}   = {and_cond} [left]:and_cond and [right]:not_cond {-> New cond.and(left.cond, and, right.cond)}
                            | {not_cond} not_cond {-> not_cond.cond}
                            ;

  not_cond{->cond}   = {not_cond} not not_cond {-> New cond.not(not, not_cond.cond)}
                            | {operator_cond} operator_cond {-> operator_cond.cond}
                            ;

  operator_cond{->cond}
                     = {operator_cond} [left]:expression comp_operator [right]:expression 
                                                  {-> New cond.comp(left.expr, comp_operator, right.expr)}
                            | {par_cond} par_cond {-> par_cond.cond}
                            ;

  par_cond{->cond}   = {par_cond} open_par condition close_par {-> condition.cond}
                            ;

  Abstract Syntax Tree
    program             = func_def;

    func_def            = [func_name]:id p_dec* ret_type local_def* statement*;

    local_def           = {func_def} func_def
                            | {func_dec} [func_name]:id p_dec* ret_type
                            | {var_dec} id* d_type expr*
                            ;

    sign                = {plus} plus
                            | {minus} minus
                            ;

    p_dec               = ref? id* par_type;

    par_type            = d_type oc_brack? number*;

    ret_type            = {nothing} nothing
                            | {type} d_type
                            ;

    expr                = {add} [left]:expr [right]:expr
                            | {sub} [left]:expr [right]:expr
                            | {mult} [left]:expr [right]:expr
                            | {div} [left]:expr [right]:expr
                            | {mod} [left]:expr [right]:expr
                            | {signed_expr} sign expr
                            | {par_expr} expr
                            | {char_c} char_const
                            | {func_call} id expr*
                            | {l_val} l_val
                            | {number} number
                            | {signed_id} sign? id
                            ;

    l_val               = {id} id expr*
                            | {str_c} string_const
                            | {str_offs} string_const expr
                            ;

    statement           = {sep}
                            | {l_val_ass} l_val expr
                            | {block} statement*
                            | {if_no_else} cond statement
                            | {if_else} cond [if]:statement [else]:statement
                            | {ret_st} return expr?
                            | {func_call} id expr*
                            | {while_st} cond statement
                            ;

    cond                = {or} [left]:cond or [right]:cond
                            | {and} [left]:cond and [right]:cond
                            | {not} not [operand]:cond
                            | {comp} [left]:expr comp_operator [right]:expr
                            ;
