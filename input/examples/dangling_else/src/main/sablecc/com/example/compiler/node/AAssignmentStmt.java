/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.example.compiler.node;

import com.example.compiler.analysis.*;

@SuppressWarnings("nls")
public final class AAssignmentStmt extends PStmt
{
    private TIdentifier _identifier_;
    private TAssignOp _assignOp_;
    private TExp _exp_;
    private TSemicolon _semicolon_;

    public AAssignmentStmt()
    {
        // Constructor
    }

    public AAssignmentStmt(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TAssignOp _assignOp_,
        @SuppressWarnings("hiding") TExp _exp_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setAssignOp(_assignOp_);

        setExp(_exp_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AAssignmentStmt(
            cloneNode(this._identifier_),
            cloneNode(this._assignOp_),
            cloneNode(this._exp_),
            cloneNode(this._semicolon_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignmentStmt(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TAssignOp getAssignOp()
    {
        return this._assignOp_;
    }

    public void setAssignOp(TAssignOp node)
    {
        if(this._assignOp_ != null)
        {
            this._assignOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignOp_ = node;
    }

    public TExp getExp()
    {
        return this._exp_;
    }

    public void setExp(TExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._assignOp_)
            + toString(this._exp_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._assignOp_ == child)
        {
            this._assignOp_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._assignOp_ == oldChild)
        {
            setAssignOp((TAssignOp) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((TExp) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
