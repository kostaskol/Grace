/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.example.compiler.analysis;

import java.util.*;
import com.example.compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStmtList().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStmtList(AStmtList node)
    {
        defaultIn(node);
    }

    public void outAStmtList(AStmtList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtList(AStmtList node)
    {
        inAStmtList(node);
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAStmtList(node);
    }

    public void inANoopStmt(ANoopStmt node)
    {
        defaultIn(node);
    }

    public void outANoopStmt(ANoopStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoopStmt(ANoopStmt node)
    {
        inANoopStmt(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoopStmt(node);
    }

    public void inAAssignmentStmt(AAssignmentStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStmt(AAssignmentStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStmt(AAssignmentStmt node)
    {
        inAAssignmentStmt(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssignOp() != null)
        {
            node.getAssignOp().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIfStmt() != null)
        {
            node.getIfStmt().apply(this);
        }
        outAIfStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getPwhile() != null)
        {
            node.getPwhile().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inABlockStmt(ABlockStmt node)
    {
        defaultIn(node);
    }

    public void outABlockStmt(ABlockStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getStmtList() != null)
        {
            node.getStmtList().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outABlockStmt(node);
    }

    public void inANoElseIfStmt(ANoElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outANoElseIfStmt(ANoElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseIfStmt(ANoElseIfStmt node)
    {
        inANoElseIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        outANoElseIfStmt(node);
    }

    public void inAWithElseIfStmt(AWithElseIfStmt node)
    {
        defaultIn(node);
    }

    public void outAWithElseIfStmt(AWithElseIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithElseIfStmt(AWithElseIfStmt node)
    {
        inAWithElseIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAWithElseIfStmt(node);
    }

    public void inANoopStmtWithElse(ANoopStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outANoopStmtWithElse(ANoopStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoopStmtWithElse(ANoopStmtWithElse node)
    {
        inANoopStmtWithElse(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outANoopStmtWithElse(node);
    }

    public void inAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        inAAssignmentStmtWithElse(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssignOp() != null)
        {
            node.getAssignOp().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentStmtWithElse(node);
    }

    public void inAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtWithElse(AIfStmtWithElse node)
    {
        inAIfStmtWithElse(node);
        if(node.getIfElseStmt() != null)
        {
            node.getIfElseStmt().apply(this);
        }
        outAIfStmtWithElse(node);
    }

    public void inAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        inAWhileStmtWithElse(node);
        if(node.getPwhile() != null)
        {
            node.getPwhile().apply(this);
        }
        outAWhileStmtWithElse(node);
    }

    public void inABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmtWithElse(ABlockStmtWithElse node)
    {
        inABlockStmtWithElse(node);
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getStmtList() != null)
        {
            node.getStmtList().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outABlockStmtWithElse(node);
    }

    public void inAIfElseStmt(AIfElseStmt node)
    {
        defaultIn(node);
    }

    public void outAIfElseStmt(AIfElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStmt(AIfElseStmt node)
    {
        inAIfElseStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getThenStmt() != null)
        {
            node.getThenStmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAIfElseStmt(node);
    }

    public void inAPwhile(APwhile node)
    {
        defaultIn(node);
    }

    public void outAPwhile(APwhile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPwhile(APwhile node)
    {
        inAPwhile(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAPwhile(node);
    }
}
